// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Ticket is an object representing the database table.
type Ticket struct {
	Ticketid                 int           `boil:"ticketid" json:"ticketid" toml:"ticketid" yaml:"ticketid"`
	Eventoid                 int           `boil:"eventoid" json:"eventoid" toml:"eventoid" yaml:"eventoid"`
	Tenantid                 int           `boil:"tenantid" json:"tenantid" toml:"tenantid" yaml:"tenantid"`
	Precooriginal            types.Decimal `boil:"precooriginal" json:"precooriginal" toml:"precooriginal" yaml:"precooriginal"`
	Iddovendedor             int           `boil:"iddovendedor" json:"iddovendedor" toml:"iddovendedor" yaml:"iddovendedor"`
	Codigounicodeverificacao string        `boil:"codigounicodeverificacao" json:"codigounicodeverificacao" toml:"codigounicodeverificacao" yaml:"codigounicodeverificacao"`
	Status                   string        `boil:"status" json:"status" toml:"status" yaml:"status"`
	Usado                    null.Bool     `boil:"usado" json:"usado,omitempty" toml:"usado" yaml:"usado,omitempty"`

	R *ticketR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ticketL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TicketColumns = struct {
	Ticketid                 string
	Eventoid                 string
	Tenantid                 string
	Precooriginal            string
	Iddovendedor             string
	Codigounicodeverificacao string
	Status                   string
	Usado                    string
}{
	Ticketid:                 "ticketid",
	Eventoid:                 "eventoid",
	Tenantid:                 "tenantid",
	Precooriginal:            "precooriginal",
	Iddovendedor:             "iddovendedor",
	Codigounicodeverificacao: "codigounicodeverificacao",
	Status:                   "status",
	Usado:                    "usado",
}

var TicketTableColumns = struct {
	Ticketid                 string
	Eventoid                 string
	Tenantid                 string
	Precooriginal            string
	Iddovendedor             string
	Codigounicodeverificacao string
	Status                   string
	Usado                    string
}{
	Ticketid:                 "ticket.ticketid",
	Eventoid:                 "ticket.eventoid",
	Tenantid:                 "ticket.tenantid",
	Precooriginal:            "ticket.precooriginal",
	Iddovendedor:             "ticket.iddovendedor",
	Codigounicodeverificacao: "ticket.codigounicodeverificacao",
	Status:                   "ticket.status",
	Usado:                    "ticket.usado",
}

// Generated where

var TicketWhere = struct {
	Ticketid                 whereHelperint
	Eventoid                 whereHelperint
	Tenantid                 whereHelperint
	Precooriginal            whereHelpertypes_Decimal
	Iddovendedor             whereHelperint
	Codigounicodeverificacao whereHelperstring
	Status                   whereHelperstring
	Usado                    whereHelpernull_Bool
}{
	Ticketid:                 whereHelperint{field: "\"ticket\".\"ticketid\""},
	Eventoid:                 whereHelperint{field: "\"ticket\".\"eventoid\""},
	Tenantid:                 whereHelperint{field: "\"ticket\".\"tenantid\""},
	Precooriginal:            whereHelpertypes_Decimal{field: "\"ticket\".\"precooriginal\""},
	Iddovendedor:             whereHelperint{field: "\"ticket\".\"iddovendedor\""},
	Codigounicodeverificacao: whereHelperstring{field: "\"ticket\".\"codigounicodeverificacao\""},
	Status:                   whereHelperstring{field: "\"ticket\".\"status\""},
	Usado:                    whereHelpernull_Bool{field: "\"ticket\".\"usado\""},
}

// TicketRels is where relationship names are stored.
var TicketRels = struct {
	EventoidEvento      string
	IddovendedorUsuario string
	TenantidTenant      string
	IddoticketTransacao string
}{
	EventoidEvento:      "EventoidEvento",
	IddovendedorUsuario: "IddovendedorUsuario",
	TenantidTenant:      "TenantidTenant",
	IddoticketTransacao: "IddoticketTransacao",
}

// ticketR is where relationships are stored.
type ticketR struct {
	EventoidEvento      *Evento    `boil:"EventoidEvento" json:"EventoidEvento" toml:"EventoidEvento" yaml:"EventoidEvento"`
	IddovendedorUsuario *Usuario   `boil:"IddovendedorUsuario" json:"IddovendedorUsuario" toml:"IddovendedorUsuario" yaml:"IddovendedorUsuario"`
	TenantidTenant      *Tenant    `boil:"TenantidTenant" json:"TenantidTenant" toml:"TenantidTenant" yaml:"TenantidTenant"`
	IddoticketTransacao *Transacao `boil:"IddoticketTransacao" json:"IddoticketTransacao" toml:"IddoticketTransacao" yaml:"IddoticketTransacao"`
}

// NewStruct creates a new relationship struct
func (*ticketR) NewStruct() *ticketR {
	return &ticketR{}
}

func (r *ticketR) GetEventoidEvento() *Evento {
	if r == nil {
		return nil
	}
	return r.EventoidEvento
}

func (r *ticketR) GetIddovendedorUsuario() *Usuario {
	if r == nil {
		return nil
	}
	return r.IddovendedorUsuario
}

func (r *ticketR) GetTenantidTenant() *Tenant {
	if r == nil {
		return nil
	}
	return r.TenantidTenant
}

func (r *ticketR) GetIddoticketTransacao() *Transacao {
	if r == nil {
		return nil
	}
	return r.IddoticketTransacao
}

// ticketL is where Load methods for each relationship are stored.
type ticketL struct{}

var (
	ticketAllColumns            = []string{"ticketid", "eventoid", "tenantid", "precooriginal", "iddovendedor", "codigounicodeverificacao", "status", "usado"}
	ticketColumnsWithoutDefault = []string{"eventoid", "tenantid", "precooriginal", "iddovendedor", "codigounicodeverificacao", "status"}
	ticketColumnsWithDefault    = []string{"ticketid", "usado"}
	ticketPrimaryKeyColumns     = []string{"ticketid"}
	ticketGeneratedColumns      = []string{}
)

type (
	// TicketSlice is an alias for a slice of pointers to Ticket.
	// This should almost always be used instead of []Ticket.
	TicketSlice []*Ticket
	// TicketHook is the signature for custom Ticket hook methods
	TicketHook func(context.Context, boil.ContextExecutor, *Ticket) error

	ticketQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ticketType                 = reflect.TypeOf(&Ticket{})
	ticketMapping              = queries.MakeStructMapping(ticketType)
	ticketPrimaryKeyMapping, _ = queries.BindMapping(ticketType, ticketMapping, ticketPrimaryKeyColumns)
	ticketInsertCacheMut       sync.RWMutex
	ticketInsertCache          = make(map[string]insertCache)
	ticketUpdateCacheMut       sync.RWMutex
	ticketUpdateCache          = make(map[string]updateCache)
	ticketUpsertCacheMut       sync.RWMutex
	ticketUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ticketAfterSelectMu sync.Mutex
var ticketAfterSelectHooks []TicketHook

var ticketBeforeInsertMu sync.Mutex
var ticketBeforeInsertHooks []TicketHook
var ticketAfterInsertMu sync.Mutex
var ticketAfterInsertHooks []TicketHook

var ticketBeforeUpdateMu sync.Mutex
var ticketBeforeUpdateHooks []TicketHook
var ticketAfterUpdateMu sync.Mutex
var ticketAfterUpdateHooks []TicketHook

var ticketBeforeDeleteMu sync.Mutex
var ticketBeforeDeleteHooks []TicketHook
var ticketAfterDeleteMu sync.Mutex
var ticketAfterDeleteHooks []TicketHook

var ticketBeforeUpsertMu sync.Mutex
var ticketBeforeUpsertHooks []TicketHook
var ticketAfterUpsertMu sync.Mutex
var ticketAfterUpsertHooks []TicketHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Ticket) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Ticket) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Ticket) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Ticket) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Ticket) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Ticket) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Ticket) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Ticket) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Ticket) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTicketHook registers your hook function for all future operations.
func AddTicketHook(hookPoint boil.HookPoint, ticketHook TicketHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ticketAfterSelectMu.Lock()
		ticketAfterSelectHooks = append(ticketAfterSelectHooks, ticketHook)
		ticketAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		ticketBeforeInsertMu.Lock()
		ticketBeforeInsertHooks = append(ticketBeforeInsertHooks, ticketHook)
		ticketBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		ticketAfterInsertMu.Lock()
		ticketAfterInsertHooks = append(ticketAfterInsertHooks, ticketHook)
		ticketAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		ticketBeforeUpdateMu.Lock()
		ticketBeforeUpdateHooks = append(ticketBeforeUpdateHooks, ticketHook)
		ticketBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		ticketAfterUpdateMu.Lock()
		ticketAfterUpdateHooks = append(ticketAfterUpdateHooks, ticketHook)
		ticketAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		ticketBeforeDeleteMu.Lock()
		ticketBeforeDeleteHooks = append(ticketBeforeDeleteHooks, ticketHook)
		ticketBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		ticketAfterDeleteMu.Lock()
		ticketAfterDeleteHooks = append(ticketAfterDeleteHooks, ticketHook)
		ticketAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		ticketBeforeUpsertMu.Lock()
		ticketBeforeUpsertHooks = append(ticketBeforeUpsertHooks, ticketHook)
		ticketBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		ticketAfterUpsertMu.Lock()
		ticketAfterUpsertHooks = append(ticketAfterUpsertHooks, ticketHook)
		ticketAfterUpsertMu.Unlock()
	}
}

// One returns a single ticket record from the query.
func (q ticketQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Ticket, error) {
	o := &Ticket{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ticket")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Ticket records from the query.
func (q ticketQuery) All(ctx context.Context, exec boil.ContextExecutor) (TicketSlice, error) {
	var o []*Ticket

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Ticket slice")
	}

	if len(ticketAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Ticket records in the query.
func (q ticketQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ticket rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q ticketQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ticket exists")
	}

	return count > 0, nil
}

// EventoidEvento pointed to by the foreign key.
func (o *Ticket) EventoidEvento(mods ...qm.QueryMod) eventoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"eventoid\" = ?", o.Eventoid),
	}

	queryMods = append(queryMods, mods...)

	return Eventos(queryMods...)
}

// IddovendedorUsuario pointed to by the foreign key.
func (o *Ticket) IddovendedorUsuario(mods ...qm.QueryMod) usuarioQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"userid\" = ?", o.Iddovendedor),
	}

	queryMods = append(queryMods, mods...)

	return Usuarios(queryMods...)
}

// TenantidTenant pointed to by the foreign key.
func (o *Ticket) TenantidTenant(mods ...qm.QueryMod) tenantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"tenantid\" = ?", o.Tenantid),
	}

	queryMods = append(queryMods, mods...)

	return Tenants(queryMods...)
}

// IddoticketTransacao pointed to by the foreign key.
func (o *Ticket) IddoticketTransacao(mods ...qm.QueryMod) transacaoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"iddoticket\" = ?", o.Ticketid),
	}

	queryMods = append(queryMods, mods...)

	return Transacaos(queryMods...)
}

// LoadEventoidEvento allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (ticketL) LoadEventoidEvento(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTicket interface{}, mods queries.Applicator) error {
	var slice []*Ticket
	var object *Ticket

	if singular {
		var ok bool
		object, ok = maybeTicket.(*Ticket)
		if !ok {
			object = new(Ticket)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTicket)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTicket))
			}
		}
	} else {
		s, ok := maybeTicket.(*[]*Ticket)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTicket)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTicket))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &ticketR{}
		}
		args[object.Eventoid] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ticketR{}
			}

			args[obj.Eventoid] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`evento`),
		qm.WhereIn(`evento.eventoid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Evento")
	}

	var resultSlice []*Evento
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Evento")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for evento")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for evento")
	}

	if len(eventoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EventoidEvento = foreign
		if foreign.R == nil {
			foreign.R = &eventoR{}
		}
		foreign.R.EventoidTickets = append(foreign.R.EventoidTickets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Eventoid == foreign.Eventoid {
				local.R.EventoidEvento = foreign
				if foreign.R == nil {
					foreign.R = &eventoR{}
				}
				foreign.R.EventoidTickets = append(foreign.R.EventoidTickets, local)
				break
			}
		}
	}

	return nil
}

// LoadIddovendedorUsuario allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (ticketL) LoadIddovendedorUsuario(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTicket interface{}, mods queries.Applicator) error {
	var slice []*Ticket
	var object *Ticket

	if singular {
		var ok bool
		object, ok = maybeTicket.(*Ticket)
		if !ok {
			object = new(Ticket)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTicket)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTicket))
			}
		}
	} else {
		s, ok := maybeTicket.(*[]*Ticket)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTicket)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTicket))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &ticketR{}
		}
		args[object.Iddovendedor] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ticketR{}
			}

			args[obj.Iddovendedor] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`usuario`),
		qm.WhereIn(`usuario.userid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Usuario")
	}

	var resultSlice []*Usuario
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Usuario")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for usuario")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usuario")
	}

	if len(usuarioAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IddovendedorUsuario = foreign
		if foreign.R == nil {
			foreign.R = &usuarioR{}
		}
		foreign.R.IddovendedorTickets = append(foreign.R.IddovendedorTickets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Iddovendedor == foreign.Userid {
				local.R.IddovendedorUsuario = foreign
				if foreign.R == nil {
					foreign.R = &usuarioR{}
				}
				foreign.R.IddovendedorTickets = append(foreign.R.IddovendedorTickets, local)
				break
			}
		}
	}

	return nil
}

// LoadTenantidTenant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (ticketL) LoadTenantidTenant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTicket interface{}, mods queries.Applicator) error {
	var slice []*Ticket
	var object *Ticket

	if singular {
		var ok bool
		object, ok = maybeTicket.(*Ticket)
		if !ok {
			object = new(Ticket)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTicket)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTicket))
			}
		}
	} else {
		s, ok := maybeTicket.(*[]*Ticket)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTicket)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTicket))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &ticketR{}
		}
		args[object.Tenantid] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ticketR{}
			}

			args[obj.Tenantid] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tenant`),
		qm.WhereIn(`tenant.tenantid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tenant")
	}

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tenant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tenant")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenant")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TenantidTenant = foreign
		if foreign.R == nil {
			foreign.R = &tenantR{}
		}
		foreign.R.TenantidTickets = append(foreign.R.TenantidTickets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Tenantid == foreign.Tenantid {
				local.R.TenantidTenant = foreign
				if foreign.R == nil {
					foreign.R = &tenantR{}
				}
				foreign.R.TenantidTickets = append(foreign.R.TenantidTickets, local)
				break
			}
		}
	}

	return nil
}

// LoadIddoticketTransacao allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (ticketL) LoadIddoticketTransacao(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTicket interface{}, mods queries.Applicator) error {
	var slice []*Ticket
	var object *Ticket

	if singular {
		var ok bool
		object, ok = maybeTicket.(*Ticket)
		if !ok {
			object = new(Ticket)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTicket)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTicket))
			}
		}
	} else {
		s, ok := maybeTicket.(*[]*Ticket)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTicket)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTicket))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &ticketR{}
		}
		args[object.Ticketid] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ticketR{}
			}

			args[obj.Ticketid] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`transacao`),
		qm.WhereIn(`transacao.iddoticket in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Transacao")
	}

	var resultSlice []*Transacao
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Transacao")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for transacao")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transacao")
	}

	if len(transacaoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IddoticketTransacao = foreign
		if foreign.R == nil {
			foreign.R = &transacaoR{}
		}
		foreign.R.IddoticketTicket = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Ticketid == foreign.Iddoticket {
				local.R.IddoticketTransacao = foreign
				if foreign.R == nil {
					foreign.R = &transacaoR{}
				}
				foreign.R.IddoticketTicket = local
				break
			}
		}
	}

	return nil
}

// SetEventoidEvento of the ticket to the related item.
// Sets o.R.EventoidEvento to related.
// Adds o to related.R.EventoidTickets.
func (o *Ticket) SetEventoidEvento(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Evento) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ticket\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"eventoid"}),
		strmangle.WhereClause("\"", "\"", 2, ticketPrimaryKeyColumns),
	)
	values := []interface{}{related.Eventoid, o.Ticketid}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Eventoid = related.Eventoid
	if o.R == nil {
		o.R = &ticketR{
			EventoidEvento: related,
		}
	} else {
		o.R.EventoidEvento = related
	}

	if related.R == nil {
		related.R = &eventoR{
			EventoidTickets: TicketSlice{o},
		}
	} else {
		related.R.EventoidTickets = append(related.R.EventoidTickets, o)
	}

	return nil
}

// SetIddovendedorUsuario of the ticket to the related item.
// Sets o.R.IddovendedorUsuario to related.
// Adds o to related.R.IddovendedorTickets.
func (o *Ticket) SetIddovendedorUsuario(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Usuario) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ticket\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"iddovendedor"}),
		strmangle.WhereClause("\"", "\"", 2, ticketPrimaryKeyColumns),
	)
	values := []interface{}{related.Userid, o.Ticketid}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Iddovendedor = related.Userid
	if o.R == nil {
		o.R = &ticketR{
			IddovendedorUsuario: related,
		}
	} else {
		o.R.IddovendedorUsuario = related
	}

	if related.R == nil {
		related.R = &usuarioR{
			IddovendedorTickets: TicketSlice{o},
		}
	} else {
		related.R.IddovendedorTickets = append(related.R.IddovendedorTickets, o)
	}

	return nil
}

// SetTenantidTenant of the ticket to the related item.
// Sets o.R.TenantidTenant to related.
// Adds o to related.R.TenantidTickets.
func (o *Ticket) SetTenantidTenant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tenant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ticket\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tenantid"}),
		strmangle.WhereClause("\"", "\"", 2, ticketPrimaryKeyColumns),
	)
	values := []interface{}{related.Tenantid, o.Ticketid}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Tenantid = related.Tenantid
	if o.R == nil {
		o.R = &ticketR{
			TenantidTenant: related,
		}
	} else {
		o.R.TenantidTenant = related
	}

	if related.R == nil {
		related.R = &tenantR{
			TenantidTickets: TicketSlice{o},
		}
	} else {
		related.R.TenantidTickets = append(related.R.TenantidTickets, o)
	}

	return nil
}

// SetIddoticketTransacao of the ticket to the related item.
// Sets o.R.IddoticketTransacao to related.
// Adds o to related.R.IddoticketTicket.
func (o *Ticket) SetIddoticketTransacao(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Transacao) error {
	var err error

	if insert {
		related.Iddoticket = o.Ticketid

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"transacao\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"iddoticket"}),
			strmangle.WhereClause("\"", "\"", 2, transacaoPrimaryKeyColumns),
		)
		values := []interface{}{o.Ticketid, related.Transacaoid}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.Iddoticket = o.Ticketid
	}

	if o.R == nil {
		o.R = &ticketR{
			IddoticketTransacao: related,
		}
	} else {
		o.R.IddoticketTransacao = related
	}

	if related.R == nil {
		related.R = &transacaoR{
			IddoticketTicket: o,
		}
	} else {
		related.R.IddoticketTicket = o
	}
	return nil
}

// Tickets retrieves all the records using an executor.
func Tickets(mods ...qm.QueryMod) ticketQuery {
	mods = append(mods, qm.From("\"ticket\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"ticket\".*"})
	}

	return ticketQuery{q}
}

// FindTicket retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTicket(ctx context.Context, exec boil.ContextExecutor, ticketid int, selectCols ...string) (*Ticket, error) {
	ticketObj := &Ticket{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ticket\" where \"ticketid\"=$1", sel,
	)

	q := queries.Raw(query, ticketid)

	err := q.Bind(ctx, exec, ticketObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ticket")
	}

	if err = ticketObj.doAfterSelectHooks(ctx, exec); err != nil {
		return ticketObj, err
	}

	return ticketObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Ticket) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ticket provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ticketColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ticketInsertCacheMut.RLock()
	cache, cached := ticketInsertCache[key]
	ticketInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ticketAllColumns,
			ticketColumnsWithDefault,
			ticketColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(ticketType, ticketMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ticketType, ticketMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ticket\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ticket\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ticket")
	}

	if !cached {
		ticketInsertCacheMut.Lock()
		ticketInsertCache[key] = cache
		ticketInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Ticket.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Ticket) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ticketUpdateCacheMut.RLock()
	cache, cached := ticketUpdateCache[key]
	ticketUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ticketAllColumns,
			ticketPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ticket, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ticket\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, ticketPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ticketType, ticketMapping, append(wl, ticketPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ticket row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ticket")
	}

	if !cached {
		ticketUpdateCacheMut.Lock()
		ticketUpdateCache[key] = cache
		ticketUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q ticketQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ticket")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ticket")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TicketSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ticketPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ticket\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, ticketPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in ticket slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all ticket")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Ticket) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no ticket provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ticketColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ticketUpsertCacheMut.RLock()
	cache, cached := ticketUpsertCache[key]
	ticketUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			ticketAllColumns,
			ticketColumnsWithDefault,
			ticketColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			ticketAllColumns,
			ticketPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert ticket, could not build update column list")
		}

		ret := strmangle.SetComplement(ticketAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(ticketPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert ticket, could not build conflict column list")
			}

			conflict = make([]string, len(ticketPrimaryKeyColumns))
			copy(conflict, ticketPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"ticket\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(ticketType, ticketMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ticketType, ticketMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert ticket")
	}

	if !cached {
		ticketUpsertCacheMut.Lock()
		ticketUpsertCache[key] = cache
		ticketUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Ticket record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Ticket) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Ticket provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ticketPrimaryKeyMapping)
	sql := "DELETE FROM \"ticket\" WHERE \"ticketid\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ticket")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ticket")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q ticketQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no ticketQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ticket")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ticket")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TicketSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ticketBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ticketPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ticket\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ticketPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ticket slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ticket")
	}

	if len(ticketAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Ticket) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTicket(ctx, exec, o.Ticketid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TicketSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TicketSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ticketPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ticket\".* FROM \"ticket\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ticketPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TicketSlice")
	}

	*o = slice

	return nil
}

// TicketExists checks if the Ticket row exists.
func TicketExists(ctx context.Context, exec boil.ContextExecutor, ticketid int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ticket\" where \"ticketid\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, ticketid)
	}
	row := exec.QueryRowContext(ctx, sql, ticketid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ticket exists")
	}

	return exists, nil
}

// Exists checks if the Ticket row exists.
func (o *Ticket) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TicketExists(ctx, exec, o.Ticketid)
}
