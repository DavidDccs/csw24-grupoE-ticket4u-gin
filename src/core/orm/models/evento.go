// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Evento is an object representing the database table.
type Evento struct {
	Eventoid     int         `boil:"eventoid" json:"eventoid" toml:"eventoid" yaml:"eventoid"`
	Tenantid     int         `boil:"tenantid" json:"tenantid" toml:"tenantid" yaml:"tenantid"`
	Nomedoevento string      `boil:"nomedoevento" json:"nomedoevento" toml:"nomedoevento" yaml:"nomedoevento"`
	Tipo         null.String `boil:"tipo" json:"tipo,omitempty" toml:"tipo" yaml:"tipo,omitempty"`
	Localizacao  null.String `boil:"localizacao" json:"localizacao,omitempty" toml:"localizacao" yaml:"localizacao,omitempty"`
	Dataehora    time.Time   `boil:"dataehora" json:"dataehora" toml:"dataehora" yaml:"dataehora"`

	R *eventoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L eventoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EventoColumns = struct {
	Eventoid     string
	Tenantid     string
	Nomedoevento string
	Tipo         string
	Localizacao  string
	Dataehora    string
}{
	Eventoid:     "eventoid",
	Tenantid:     "tenantid",
	Nomedoevento: "nomedoevento",
	Tipo:         "tipo",
	Localizacao:  "localizacao",
	Dataehora:    "dataehora",
}

var EventoTableColumns = struct {
	Eventoid     string
	Tenantid     string
	Nomedoevento string
	Tipo         string
	Localizacao  string
	Dataehora    string
}{
	Eventoid:     "evento.eventoid",
	Tenantid:     "evento.tenantid",
	Nomedoevento: "evento.nomedoevento",
	Tipo:         "evento.tipo",
	Localizacao:  "evento.localizacao",
	Dataehora:    "evento.dataehora",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var EventoWhere = struct {
	Eventoid     whereHelperint
	Tenantid     whereHelperint
	Nomedoevento whereHelperstring
	Tipo         whereHelpernull_String
	Localizacao  whereHelpernull_String
	Dataehora    whereHelpertime_Time
}{
	Eventoid:     whereHelperint{field: "\"evento\".\"eventoid\""},
	Tenantid:     whereHelperint{field: "\"evento\".\"tenantid\""},
	Nomedoevento: whereHelperstring{field: "\"evento\".\"nomedoevento\""},
	Tipo:         whereHelpernull_String{field: "\"evento\".\"tipo\""},
	Localizacao:  whereHelpernull_String{field: "\"evento\".\"localizacao\""},
	Dataehora:    whereHelpertime_Time{field: "\"evento\".\"dataehora\""},
}

// EventoRels is where relationship names are stored.
var EventoRels = struct {
	TenantidTenant  string
	EventoidTickets string
}{
	TenantidTenant:  "TenantidTenant",
	EventoidTickets: "EventoidTickets",
}

// eventoR is where relationships are stored.
type eventoR struct {
	TenantidTenant  *Tenant     `boil:"TenantidTenant" json:"TenantidTenant" toml:"TenantidTenant" yaml:"TenantidTenant"`
	EventoidTickets TicketSlice `boil:"EventoidTickets" json:"EventoidTickets" toml:"EventoidTickets" yaml:"EventoidTickets"`
}

// NewStruct creates a new relationship struct
func (*eventoR) NewStruct() *eventoR {
	return &eventoR{}
}

func (r *eventoR) GetTenantidTenant() *Tenant {
	if r == nil {
		return nil
	}
	return r.TenantidTenant
}

func (r *eventoR) GetEventoidTickets() TicketSlice {
	if r == nil {
		return nil
	}
	return r.EventoidTickets
}

// eventoL is where Load methods for each relationship are stored.
type eventoL struct{}

var (
	eventoAllColumns            = []string{"eventoid", "tenantid", "nomedoevento", "tipo", "localizacao", "dataehora"}
	eventoColumnsWithoutDefault = []string{"tenantid", "nomedoevento", "dataehora"}
	eventoColumnsWithDefault    = []string{"eventoid", "tipo", "localizacao"}
	eventoPrimaryKeyColumns     = []string{"eventoid"}
	eventoGeneratedColumns      = []string{}
)

type (
	// EventoSlice is an alias for a slice of pointers to Evento.
	// This should almost always be used instead of []Evento.
	EventoSlice []*Evento
	// EventoHook is the signature for custom Evento hook methods
	EventoHook func(context.Context, boil.ContextExecutor, *Evento) error

	eventoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	eventoType                 = reflect.TypeOf(&Evento{})
	eventoMapping              = queries.MakeStructMapping(eventoType)
	eventoPrimaryKeyMapping, _ = queries.BindMapping(eventoType, eventoMapping, eventoPrimaryKeyColumns)
	eventoInsertCacheMut       sync.RWMutex
	eventoInsertCache          = make(map[string]insertCache)
	eventoUpdateCacheMut       sync.RWMutex
	eventoUpdateCache          = make(map[string]updateCache)
	eventoUpsertCacheMut       sync.RWMutex
	eventoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var eventoAfterSelectMu sync.Mutex
var eventoAfterSelectHooks []EventoHook

var eventoBeforeInsertMu sync.Mutex
var eventoBeforeInsertHooks []EventoHook
var eventoAfterInsertMu sync.Mutex
var eventoAfterInsertHooks []EventoHook

var eventoBeforeUpdateMu sync.Mutex
var eventoBeforeUpdateHooks []EventoHook
var eventoAfterUpdateMu sync.Mutex
var eventoAfterUpdateHooks []EventoHook

var eventoBeforeDeleteMu sync.Mutex
var eventoBeforeDeleteHooks []EventoHook
var eventoAfterDeleteMu sync.Mutex
var eventoAfterDeleteHooks []EventoHook

var eventoBeforeUpsertMu sync.Mutex
var eventoBeforeUpsertHooks []EventoHook
var eventoAfterUpsertMu sync.Mutex
var eventoAfterUpsertHooks []EventoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Evento) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Evento) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Evento) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Evento) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Evento) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Evento) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Evento) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Evento) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Evento) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEventoHook registers your hook function for all future operations.
func AddEventoHook(hookPoint boil.HookPoint, eventoHook EventoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		eventoAfterSelectMu.Lock()
		eventoAfterSelectHooks = append(eventoAfterSelectHooks, eventoHook)
		eventoAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		eventoBeforeInsertMu.Lock()
		eventoBeforeInsertHooks = append(eventoBeforeInsertHooks, eventoHook)
		eventoBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		eventoAfterInsertMu.Lock()
		eventoAfterInsertHooks = append(eventoAfterInsertHooks, eventoHook)
		eventoAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		eventoBeforeUpdateMu.Lock()
		eventoBeforeUpdateHooks = append(eventoBeforeUpdateHooks, eventoHook)
		eventoBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		eventoAfterUpdateMu.Lock()
		eventoAfterUpdateHooks = append(eventoAfterUpdateHooks, eventoHook)
		eventoAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		eventoBeforeDeleteMu.Lock()
		eventoBeforeDeleteHooks = append(eventoBeforeDeleteHooks, eventoHook)
		eventoBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		eventoAfterDeleteMu.Lock()
		eventoAfterDeleteHooks = append(eventoAfterDeleteHooks, eventoHook)
		eventoAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		eventoBeforeUpsertMu.Lock()
		eventoBeforeUpsertHooks = append(eventoBeforeUpsertHooks, eventoHook)
		eventoBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		eventoAfterUpsertMu.Lock()
		eventoAfterUpsertHooks = append(eventoAfterUpsertHooks, eventoHook)
		eventoAfterUpsertMu.Unlock()
	}
}

// One returns a single evento record from the query.
func (q eventoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Evento, error) {
	o := &Evento{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for evento")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Evento records from the query.
func (q eventoQuery) All(ctx context.Context, exec boil.ContextExecutor) (EventoSlice, error) {
	var o []*Evento

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Evento slice")
	}

	if len(eventoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Evento records in the query.
func (q eventoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count evento rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q eventoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if evento exists")
	}

	return count > 0, nil
}

// TenantidTenant pointed to by the foreign key.
func (o *Evento) TenantidTenant(mods ...qm.QueryMod) tenantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"tenantid\" = ?", o.Tenantid),
	}

	queryMods = append(queryMods, mods...)

	return Tenants(queryMods...)
}

// EventoidTickets retrieves all the ticket's Tickets with an executor via eventoid column.
func (o *Evento) EventoidTickets(mods ...qm.QueryMod) ticketQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"ticket\".\"eventoid\"=?", o.Eventoid),
	)

	return Tickets(queryMods...)
}

// LoadTenantidTenant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (eventoL) LoadTenantidTenant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEvento interface{}, mods queries.Applicator) error {
	var slice []*Evento
	var object *Evento

	if singular {
		var ok bool
		object, ok = maybeEvento.(*Evento)
		if !ok {
			object = new(Evento)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEvento)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEvento))
			}
		}
	} else {
		s, ok := maybeEvento.(*[]*Evento)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEvento)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEvento))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &eventoR{}
		}
		args[object.Tenantid] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &eventoR{}
			}

			args[obj.Tenantid] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tenant`),
		qm.WhereIn(`tenant.tenantid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tenant")
	}

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tenant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tenant")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenant")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TenantidTenant = foreign
		if foreign.R == nil {
			foreign.R = &tenantR{}
		}
		foreign.R.TenantidEventos = append(foreign.R.TenantidEventos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Tenantid == foreign.Tenantid {
				local.R.TenantidTenant = foreign
				if foreign.R == nil {
					foreign.R = &tenantR{}
				}
				foreign.R.TenantidEventos = append(foreign.R.TenantidEventos, local)
				break
			}
		}
	}

	return nil
}

// LoadEventoidTickets allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (eventoL) LoadEventoidTickets(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEvento interface{}, mods queries.Applicator) error {
	var slice []*Evento
	var object *Evento

	if singular {
		var ok bool
		object, ok = maybeEvento.(*Evento)
		if !ok {
			object = new(Evento)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEvento)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEvento))
			}
		}
	} else {
		s, ok := maybeEvento.(*[]*Evento)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEvento)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEvento))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &eventoR{}
		}
		args[object.Eventoid] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &eventoR{}
			}
			args[obj.Eventoid] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`ticket`),
		qm.WhereIn(`ticket.eventoid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ticket")
	}

	var resultSlice []*Ticket
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ticket")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on ticket")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ticket")
	}

	if len(ticketAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EventoidTickets = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &ticketR{}
			}
			foreign.R.EventoidEvento = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Eventoid == foreign.Eventoid {
				local.R.EventoidTickets = append(local.R.EventoidTickets, foreign)
				if foreign.R == nil {
					foreign.R = &ticketR{}
				}
				foreign.R.EventoidEvento = local
				break
			}
		}
	}

	return nil
}

// SetTenantidTenant of the evento to the related item.
// Sets o.R.TenantidTenant to related.
// Adds o to related.R.TenantidEventos.
func (o *Evento) SetTenantidTenant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tenant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"evento\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tenantid"}),
		strmangle.WhereClause("\"", "\"", 2, eventoPrimaryKeyColumns),
	)
	values := []interface{}{related.Tenantid, o.Eventoid}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Tenantid = related.Tenantid
	if o.R == nil {
		o.R = &eventoR{
			TenantidTenant: related,
		}
	} else {
		o.R.TenantidTenant = related
	}

	if related.R == nil {
		related.R = &tenantR{
			TenantidEventos: EventoSlice{o},
		}
	} else {
		related.R.TenantidEventos = append(related.R.TenantidEventos, o)
	}

	return nil
}

// AddEventoidTickets adds the given related objects to the existing relationships
// of the evento, optionally inserting them as new records.
// Appends related to o.R.EventoidTickets.
// Sets related.R.EventoidEvento appropriately.
func (o *Evento) AddEventoidTickets(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Ticket) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Eventoid = o.Eventoid
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"ticket\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"eventoid"}),
				strmangle.WhereClause("\"", "\"", 2, ticketPrimaryKeyColumns),
			)
			values := []interface{}{o.Eventoid, rel.Ticketid}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Eventoid = o.Eventoid
		}
	}

	if o.R == nil {
		o.R = &eventoR{
			EventoidTickets: related,
		}
	} else {
		o.R.EventoidTickets = append(o.R.EventoidTickets, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &ticketR{
				EventoidEvento: o,
			}
		} else {
			rel.R.EventoidEvento = o
		}
	}
	return nil
}

// Eventos retrieves all the records using an executor.
func Eventos(mods ...qm.QueryMod) eventoQuery {
	mods = append(mods, qm.From("\"evento\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"evento\".*"})
	}

	return eventoQuery{q}
}

// FindEvento retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEvento(ctx context.Context, exec boil.ContextExecutor, eventoid int, selectCols ...string) (*Evento, error) {
	eventoObj := &Evento{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"evento\" where \"eventoid\"=$1", sel,
	)

	q := queries.Raw(query, eventoid)

	err := q.Bind(ctx, exec, eventoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from evento")
	}

	if err = eventoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return eventoObj, err
	}

	return eventoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Evento) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no evento provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(eventoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	eventoInsertCacheMut.RLock()
	cache, cached := eventoInsertCache[key]
	eventoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			eventoAllColumns,
			eventoColumnsWithDefault,
			eventoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(eventoType, eventoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(eventoType, eventoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"evento\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"evento\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into evento")
	}

	if !cached {
		eventoInsertCacheMut.Lock()
		eventoInsertCache[key] = cache
		eventoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Evento.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Evento) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	eventoUpdateCacheMut.RLock()
	cache, cached := eventoUpdateCache[key]
	eventoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			eventoAllColumns,
			eventoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update evento, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"evento\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, eventoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(eventoType, eventoMapping, append(wl, eventoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update evento row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for evento")
	}

	if !cached {
		eventoUpdateCacheMut.Lock()
		eventoUpdateCache[key] = cache
		eventoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q eventoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for evento")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for evento")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EventoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"evento\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, eventoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in evento slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all evento")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Evento) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no evento provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(eventoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	eventoUpsertCacheMut.RLock()
	cache, cached := eventoUpsertCache[key]
	eventoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			eventoAllColumns,
			eventoColumnsWithDefault,
			eventoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			eventoAllColumns,
			eventoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert evento, could not build update column list")
		}

		ret := strmangle.SetComplement(eventoAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(eventoPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert evento, could not build conflict column list")
			}

			conflict = make([]string, len(eventoPrimaryKeyColumns))
			copy(conflict, eventoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"evento\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(eventoType, eventoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(eventoType, eventoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert evento")
	}

	if !cached {
		eventoUpsertCacheMut.Lock()
		eventoUpsertCache[key] = cache
		eventoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Evento record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Evento) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Evento provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), eventoPrimaryKeyMapping)
	sql := "DELETE FROM \"evento\" WHERE \"eventoid\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from evento")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for evento")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q eventoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no eventoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from evento")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for evento")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EventoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(eventoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"evento\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, eventoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from evento slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for evento")
	}

	if len(eventoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Evento) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEvento(ctx, exec, o.Eventoid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EventoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EventoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"evento\".* FROM \"evento\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, eventoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EventoSlice")
	}

	*o = slice

	return nil
}

// EventoExists checks if the Evento row exists.
func EventoExists(ctx context.Context, exec boil.ContextExecutor, eventoid int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"evento\" where \"eventoid\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, eventoid)
	}
	row := exec.QueryRowContext(ctx, sql, eventoid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if evento exists")
	}

	return exists, nil
}

// Exists checks if the Evento row exists.
func (o *Evento) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return EventoExists(ctx, exec, o.Eventoid)
}
