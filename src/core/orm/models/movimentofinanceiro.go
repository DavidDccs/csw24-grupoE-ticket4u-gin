// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Movimentofinanceiro is an object representing the database table.
type Movimentofinanceiro struct {
	Movimentoid   int           `boil:"movimentoid" json:"movimentoid" toml:"movimentoid" yaml:"movimentoid"`
	Userid        int           `boil:"userid" json:"userid" toml:"userid" yaml:"userid"`
	Valor         types.Decimal `boil:"valor" json:"valor" toml:"valor" yaml:"valor"`
	Datamovimento null.Time     `boil:"datamovimento" json:"datamovimento,omitempty" toml:"datamovimento" yaml:"datamovimento,omitempty"`
	Tipomovimento string        `boil:"tipomovimento" json:"tipomovimento" toml:"tipomovimento" yaml:"tipomovimento"`
	Descricao     null.String   `boil:"descricao" json:"descricao,omitempty" toml:"descricao" yaml:"descricao,omitempty"`

	R *movimentofinanceiroR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L movimentofinanceiroL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MovimentofinanceiroColumns = struct {
	Movimentoid   string
	Userid        string
	Valor         string
	Datamovimento string
	Tipomovimento string
	Descricao     string
}{
	Movimentoid:   "movimentoid",
	Userid:        "userid",
	Valor:         "valor",
	Datamovimento: "datamovimento",
	Tipomovimento: "tipomovimento",
	Descricao:     "descricao",
}

var MovimentofinanceiroTableColumns = struct {
	Movimentoid   string
	Userid        string
	Valor         string
	Datamovimento string
	Tipomovimento string
	Descricao     string
}{
	Movimentoid:   "movimentofinanceiro.movimentoid",
	Userid:        "movimentofinanceiro.userid",
	Valor:         "movimentofinanceiro.valor",
	Datamovimento: "movimentofinanceiro.datamovimento",
	Tipomovimento: "movimentofinanceiro.tipomovimento",
	Descricao:     "movimentofinanceiro.descricao",
}

// Generated where

type whereHelpertypes_Decimal struct{ field string }

func (w whereHelpertypes_Decimal) EQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Decimal) NEQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Decimal) LT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Decimal) LTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Decimal) GT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Decimal) GTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var MovimentofinanceiroWhere = struct {
	Movimentoid   whereHelperint
	Userid        whereHelperint
	Valor         whereHelpertypes_Decimal
	Datamovimento whereHelpernull_Time
	Tipomovimento whereHelperstring
	Descricao     whereHelpernull_String
}{
	Movimentoid:   whereHelperint{field: "\"movimentofinanceiro\".\"movimentoid\""},
	Userid:        whereHelperint{field: "\"movimentofinanceiro\".\"userid\""},
	Valor:         whereHelpertypes_Decimal{field: "\"movimentofinanceiro\".\"valor\""},
	Datamovimento: whereHelpernull_Time{field: "\"movimentofinanceiro\".\"datamovimento\""},
	Tipomovimento: whereHelperstring{field: "\"movimentofinanceiro\".\"tipomovimento\""},
	Descricao:     whereHelpernull_String{field: "\"movimentofinanceiro\".\"descricao\""},
}

// MovimentofinanceiroRels is where relationship names are stored.
var MovimentofinanceiroRels = struct {
	UseridUsuario string
}{
	UseridUsuario: "UseridUsuario",
}

// movimentofinanceiroR is where relationships are stored.
type movimentofinanceiroR struct {
	UseridUsuario *Usuario `boil:"UseridUsuario" json:"UseridUsuario" toml:"UseridUsuario" yaml:"UseridUsuario"`
}

// NewStruct creates a new relationship struct
func (*movimentofinanceiroR) NewStruct() *movimentofinanceiroR {
	return &movimentofinanceiroR{}
}

func (r *movimentofinanceiroR) GetUseridUsuario() *Usuario {
	if r == nil {
		return nil
	}
	return r.UseridUsuario
}

// movimentofinanceiroL is where Load methods for each relationship are stored.
type movimentofinanceiroL struct{}

var (
	movimentofinanceiroAllColumns            = []string{"movimentoid", "userid", "valor", "datamovimento", "tipomovimento", "descricao"}
	movimentofinanceiroColumnsWithoutDefault = []string{"userid", "valor", "tipomovimento"}
	movimentofinanceiroColumnsWithDefault    = []string{"movimentoid", "datamovimento", "descricao"}
	movimentofinanceiroPrimaryKeyColumns     = []string{"movimentoid"}
	movimentofinanceiroGeneratedColumns      = []string{}
)

type (
	// MovimentofinanceiroSlice is an alias for a slice of pointers to Movimentofinanceiro.
	// This should almost always be used instead of []Movimentofinanceiro.
	MovimentofinanceiroSlice []*Movimentofinanceiro
	// MovimentofinanceiroHook is the signature for custom Movimentofinanceiro hook methods
	MovimentofinanceiroHook func(context.Context, boil.ContextExecutor, *Movimentofinanceiro) error

	movimentofinanceiroQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	movimentofinanceiroType                 = reflect.TypeOf(&Movimentofinanceiro{})
	movimentofinanceiroMapping              = queries.MakeStructMapping(movimentofinanceiroType)
	movimentofinanceiroPrimaryKeyMapping, _ = queries.BindMapping(movimentofinanceiroType, movimentofinanceiroMapping, movimentofinanceiroPrimaryKeyColumns)
	movimentofinanceiroInsertCacheMut       sync.RWMutex
	movimentofinanceiroInsertCache          = make(map[string]insertCache)
	movimentofinanceiroUpdateCacheMut       sync.RWMutex
	movimentofinanceiroUpdateCache          = make(map[string]updateCache)
	movimentofinanceiroUpsertCacheMut       sync.RWMutex
	movimentofinanceiroUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var movimentofinanceiroAfterSelectMu sync.Mutex
var movimentofinanceiroAfterSelectHooks []MovimentofinanceiroHook

var movimentofinanceiroBeforeInsertMu sync.Mutex
var movimentofinanceiroBeforeInsertHooks []MovimentofinanceiroHook
var movimentofinanceiroAfterInsertMu sync.Mutex
var movimentofinanceiroAfterInsertHooks []MovimentofinanceiroHook

var movimentofinanceiroBeforeUpdateMu sync.Mutex
var movimentofinanceiroBeforeUpdateHooks []MovimentofinanceiroHook
var movimentofinanceiroAfterUpdateMu sync.Mutex
var movimentofinanceiroAfterUpdateHooks []MovimentofinanceiroHook

var movimentofinanceiroBeforeDeleteMu sync.Mutex
var movimentofinanceiroBeforeDeleteHooks []MovimentofinanceiroHook
var movimentofinanceiroAfterDeleteMu sync.Mutex
var movimentofinanceiroAfterDeleteHooks []MovimentofinanceiroHook

var movimentofinanceiroBeforeUpsertMu sync.Mutex
var movimentofinanceiroBeforeUpsertHooks []MovimentofinanceiroHook
var movimentofinanceiroAfterUpsertMu sync.Mutex
var movimentofinanceiroAfterUpsertHooks []MovimentofinanceiroHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Movimentofinanceiro) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range movimentofinanceiroAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Movimentofinanceiro) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range movimentofinanceiroBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Movimentofinanceiro) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range movimentofinanceiroAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Movimentofinanceiro) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range movimentofinanceiroBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Movimentofinanceiro) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range movimentofinanceiroAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Movimentofinanceiro) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range movimentofinanceiroBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Movimentofinanceiro) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range movimentofinanceiroAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Movimentofinanceiro) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range movimentofinanceiroBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Movimentofinanceiro) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range movimentofinanceiroAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMovimentofinanceiroHook registers your hook function for all future operations.
func AddMovimentofinanceiroHook(hookPoint boil.HookPoint, movimentofinanceiroHook MovimentofinanceiroHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		movimentofinanceiroAfterSelectMu.Lock()
		movimentofinanceiroAfterSelectHooks = append(movimentofinanceiroAfterSelectHooks, movimentofinanceiroHook)
		movimentofinanceiroAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		movimentofinanceiroBeforeInsertMu.Lock()
		movimentofinanceiroBeforeInsertHooks = append(movimentofinanceiroBeforeInsertHooks, movimentofinanceiroHook)
		movimentofinanceiroBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		movimentofinanceiroAfterInsertMu.Lock()
		movimentofinanceiroAfterInsertHooks = append(movimentofinanceiroAfterInsertHooks, movimentofinanceiroHook)
		movimentofinanceiroAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		movimentofinanceiroBeforeUpdateMu.Lock()
		movimentofinanceiroBeforeUpdateHooks = append(movimentofinanceiroBeforeUpdateHooks, movimentofinanceiroHook)
		movimentofinanceiroBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		movimentofinanceiroAfterUpdateMu.Lock()
		movimentofinanceiroAfterUpdateHooks = append(movimentofinanceiroAfterUpdateHooks, movimentofinanceiroHook)
		movimentofinanceiroAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		movimentofinanceiroBeforeDeleteMu.Lock()
		movimentofinanceiroBeforeDeleteHooks = append(movimentofinanceiroBeforeDeleteHooks, movimentofinanceiroHook)
		movimentofinanceiroBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		movimentofinanceiroAfterDeleteMu.Lock()
		movimentofinanceiroAfterDeleteHooks = append(movimentofinanceiroAfterDeleteHooks, movimentofinanceiroHook)
		movimentofinanceiroAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		movimentofinanceiroBeforeUpsertMu.Lock()
		movimentofinanceiroBeforeUpsertHooks = append(movimentofinanceiroBeforeUpsertHooks, movimentofinanceiroHook)
		movimentofinanceiroBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		movimentofinanceiroAfterUpsertMu.Lock()
		movimentofinanceiroAfterUpsertHooks = append(movimentofinanceiroAfterUpsertHooks, movimentofinanceiroHook)
		movimentofinanceiroAfterUpsertMu.Unlock()
	}
}

// One returns a single movimentofinanceiro record from the query.
func (q movimentofinanceiroQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Movimentofinanceiro, error) {
	o := &Movimentofinanceiro{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for movimentofinanceiro")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Movimentofinanceiro records from the query.
func (q movimentofinanceiroQuery) All(ctx context.Context, exec boil.ContextExecutor) (MovimentofinanceiroSlice, error) {
	var o []*Movimentofinanceiro

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Movimentofinanceiro slice")
	}

	if len(movimentofinanceiroAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Movimentofinanceiro records in the query.
func (q movimentofinanceiroQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count movimentofinanceiro rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q movimentofinanceiroQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if movimentofinanceiro exists")
	}

	return count > 0, nil
}

// UseridUsuario pointed to by the foreign key.
func (o *Movimentofinanceiro) UseridUsuario(mods ...qm.QueryMod) usuarioQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"userid\" = ?", o.Userid),
	}

	queryMods = append(queryMods, mods...)

	return Usuarios(queryMods...)
}

// LoadUseridUsuario allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (movimentofinanceiroL) LoadUseridUsuario(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMovimentofinanceiro interface{}, mods queries.Applicator) error {
	var slice []*Movimentofinanceiro
	var object *Movimentofinanceiro

	if singular {
		var ok bool
		object, ok = maybeMovimentofinanceiro.(*Movimentofinanceiro)
		if !ok {
			object = new(Movimentofinanceiro)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMovimentofinanceiro)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMovimentofinanceiro))
			}
		}
	} else {
		s, ok := maybeMovimentofinanceiro.(*[]*Movimentofinanceiro)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMovimentofinanceiro)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMovimentofinanceiro))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &movimentofinanceiroR{}
		}
		args[object.Userid] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &movimentofinanceiroR{}
			}

			args[obj.Userid] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`usuario`),
		qm.WhereIn(`usuario.userid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Usuario")
	}

	var resultSlice []*Usuario
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Usuario")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for usuario")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usuario")
	}

	if len(usuarioAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UseridUsuario = foreign
		if foreign.R == nil {
			foreign.R = &usuarioR{}
		}
		foreign.R.UseridMovimentofinanceiros = append(foreign.R.UseridMovimentofinanceiros, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Userid == foreign.Userid {
				local.R.UseridUsuario = foreign
				if foreign.R == nil {
					foreign.R = &usuarioR{}
				}
				foreign.R.UseridMovimentofinanceiros = append(foreign.R.UseridMovimentofinanceiros, local)
				break
			}
		}
	}

	return nil
}

// SetUseridUsuario of the movimentofinanceiro to the related item.
// Sets o.R.UseridUsuario to related.
// Adds o to related.R.UseridMovimentofinanceiros.
func (o *Movimentofinanceiro) SetUseridUsuario(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Usuario) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"movimentofinanceiro\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"userid"}),
		strmangle.WhereClause("\"", "\"", 2, movimentofinanceiroPrimaryKeyColumns),
	)
	values := []interface{}{related.Userid, o.Movimentoid}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Userid = related.Userid
	if o.R == nil {
		o.R = &movimentofinanceiroR{
			UseridUsuario: related,
		}
	} else {
		o.R.UseridUsuario = related
	}

	if related.R == nil {
		related.R = &usuarioR{
			UseridMovimentofinanceiros: MovimentofinanceiroSlice{o},
		}
	} else {
		related.R.UseridMovimentofinanceiros = append(related.R.UseridMovimentofinanceiros, o)
	}

	return nil
}

// Movimentofinanceiros retrieves all the records using an executor.
func Movimentofinanceiros(mods ...qm.QueryMod) movimentofinanceiroQuery {
	mods = append(mods, qm.From("\"movimentofinanceiro\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"movimentofinanceiro\".*"})
	}

	return movimentofinanceiroQuery{q}
}

// FindMovimentofinanceiro retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMovimentofinanceiro(ctx context.Context, exec boil.ContextExecutor, movimentoid int, selectCols ...string) (*Movimentofinanceiro, error) {
	movimentofinanceiroObj := &Movimentofinanceiro{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"movimentofinanceiro\" where \"movimentoid\"=$1", sel,
	)

	q := queries.Raw(query, movimentoid)

	err := q.Bind(ctx, exec, movimentofinanceiroObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from movimentofinanceiro")
	}

	if err = movimentofinanceiroObj.doAfterSelectHooks(ctx, exec); err != nil {
		return movimentofinanceiroObj, err
	}

	return movimentofinanceiroObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Movimentofinanceiro) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no movimentofinanceiro provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(movimentofinanceiroColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	movimentofinanceiroInsertCacheMut.RLock()
	cache, cached := movimentofinanceiroInsertCache[key]
	movimentofinanceiroInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			movimentofinanceiroAllColumns,
			movimentofinanceiroColumnsWithDefault,
			movimentofinanceiroColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(movimentofinanceiroType, movimentofinanceiroMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(movimentofinanceiroType, movimentofinanceiroMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"movimentofinanceiro\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"movimentofinanceiro\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into movimentofinanceiro")
	}

	if !cached {
		movimentofinanceiroInsertCacheMut.Lock()
		movimentofinanceiroInsertCache[key] = cache
		movimentofinanceiroInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Movimentofinanceiro.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Movimentofinanceiro) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	movimentofinanceiroUpdateCacheMut.RLock()
	cache, cached := movimentofinanceiroUpdateCache[key]
	movimentofinanceiroUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			movimentofinanceiroAllColumns,
			movimentofinanceiroPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update movimentofinanceiro, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"movimentofinanceiro\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, movimentofinanceiroPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(movimentofinanceiroType, movimentofinanceiroMapping, append(wl, movimentofinanceiroPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update movimentofinanceiro row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for movimentofinanceiro")
	}

	if !cached {
		movimentofinanceiroUpdateCacheMut.Lock()
		movimentofinanceiroUpdateCache[key] = cache
		movimentofinanceiroUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q movimentofinanceiroQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for movimentofinanceiro")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for movimentofinanceiro")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MovimentofinanceiroSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), movimentofinanceiroPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"movimentofinanceiro\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, movimentofinanceiroPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in movimentofinanceiro slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all movimentofinanceiro")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Movimentofinanceiro) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no movimentofinanceiro provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(movimentofinanceiroColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	movimentofinanceiroUpsertCacheMut.RLock()
	cache, cached := movimentofinanceiroUpsertCache[key]
	movimentofinanceiroUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			movimentofinanceiroAllColumns,
			movimentofinanceiroColumnsWithDefault,
			movimentofinanceiroColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			movimentofinanceiroAllColumns,
			movimentofinanceiroPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert movimentofinanceiro, could not build update column list")
		}

		ret := strmangle.SetComplement(movimentofinanceiroAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(movimentofinanceiroPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert movimentofinanceiro, could not build conflict column list")
			}

			conflict = make([]string, len(movimentofinanceiroPrimaryKeyColumns))
			copy(conflict, movimentofinanceiroPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"movimentofinanceiro\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(movimentofinanceiroType, movimentofinanceiroMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(movimentofinanceiroType, movimentofinanceiroMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert movimentofinanceiro")
	}

	if !cached {
		movimentofinanceiroUpsertCacheMut.Lock()
		movimentofinanceiroUpsertCache[key] = cache
		movimentofinanceiroUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Movimentofinanceiro record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Movimentofinanceiro) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Movimentofinanceiro provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), movimentofinanceiroPrimaryKeyMapping)
	sql := "DELETE FROM \"movimentofinanceiro\" WHERE \"movimentoid\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from movimentofinanceiro")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for movimentofinanceiro")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q movimentofinanceiroQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no movimentofinanceiroQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from movimentofinanceiro")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for movimentofinanceiro")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MovimentofinanceiroSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(movimentofinanceiroBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), movimentofinanceiroPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"movimentofinanceiro\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, movimentofinanceiroPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from movimentofinanceiro slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for movimentofinanceiro")
	}

	if len(movimentofinanceiroAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Movimentofinanceiro) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMovimentofinanceiro(ctx, exec, o.Movimentoid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MovimentofinanceiroSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MovimentofinanceiroSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), movimentofinanceiroPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"movimentofinanceiro\".* FROM \"movimentofinanceiro\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, movimentofinanceiroPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MovimentofinanceiroSlice")
	}

	*o = slice

	return nil
}

// MovimentofinanceiroExists checks if the Movimentofinanceiro row exists.
func MovimentofinanceiroExists(ctx context.Context, exec boil.ContextExecutor, movimentoid int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"movimentofinanceiro\" where \"movimentoid\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, movimentoid)
	}
	row := exec.QueryRowContext(ctx, sql, movimentoid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if movimentofinanceiro exists")
	}

	return exists, nil
}

// Exists checks if the Movimentofinanceiro row exists.
func (o *Movimentofinanceiro) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MovimentofinanceiroExists(ctx, exec, o.Movimentoid)
}
