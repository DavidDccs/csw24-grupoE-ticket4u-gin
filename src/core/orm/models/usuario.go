// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
	"github.com/volatiletech/sqlboiler/v4/types"
)

// Usuario is an object representing the database table.
type Usuario struct {
	Userid   int    `boil:"userid" json:"userid" toml:"userid" yaml:"userid"`
	Tenantid int    `boil:"tenantid" json:"tenantid" toml:"tenantid" yaml:"tenantid"`
	Nome     string `boil:"nome" json:"nome" toml:"nome" yaml:"nome"`
	Email    string `boil:"email" json:"email" toml:"email" yaml:"email"`

	R *usuarioR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L usuarioL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsuarioColumns = struct {
	Userid   string
	Tenantid string
	Nome     string
	Email    string
}{
	Userid:   "userid",
	Tenantid: "tenantid",
	Nome:     "nome",
	Email:    "email",
}

var UsuarioTableColumns = struct {
	Userid   string
	Tenantid string
	Nome     string
	Email    string
}{
	Userid:   "usuario.userid",
	Tenantid: "usuario.tenantid",
	Nome:     "usuario.nome",
	Email:    "usuario.email",
}

// Generated where

var UsuarioWhere = struct {
	Userid   whereHelperint
	Tenantid whereHelperint
	Nome     whereHelperstring
	Email    whereHelperstring
}{
	Userid:   whereHelperint{field: "\"usuario\".\"userid\""},
	Tenantid: whereHelperint{field: "\"usuario\".\"tenantid\""},
	Nome:     whereHelperstring{field: "\"usuario\".\"nome\""},
	Email:    whereHelperstring{field: "\"usuario\".\"email\""},
}

// UsuarioRels is where relationship names are stored.
var UsuarioRels = struct {
	TenantidTenant                  string
	UseridPreferenciasdenotificacao string
	CompradoridAvaliacaos           string
	VendedoridAvaliacaos            string
	UseridMovimentofinanceiros      string
	IddovendedorTickets             string
	IddocompradorTransacaos         string
}{
	TenantidTenant:                  "TenantidTenant",
	UseridPreferenciasdenotificacao: "UseridPreferenciasdenotificacao",
	CompradoridAvaliacaos:           "CompradoridAvaliacaos",
	VendedoridAvaliacaos:            "VendedoridAvaliacaos",
	UseridMovimentofinanceiros:      "UseridMovimentofinanceiros",
	IddovendedorTickets:             "IddovendedorTickets",
	IddocompradorTransacaos:         "IddocompradorTransacaos",
}

// usuarioR is where relationships are stored.
type usuarioR struct {
	TenantidTenant                  *Tenant                    `boil:"TenantidTenant" json:"TenantidTenant" toml:"TenantidTenant" yaml:"TenantidTenant"`
	UseridPreferenciasdenotificacao *Preferenciasdenotificacao `boil:"UseridPreferenciasdenotificacao" json:"UseridPreferenciasdenotificacao" toml:"UseridPreferenciasdenotificacao" yaml:"UseridPreferenciasdenotificacao"`
	CompradoridAvaliacaos           AvaliacaoSlice             `boil:"CompradoridAvaliacaos" json:"CompradoridAvaliacaos" toml:"CompradoridAvaliacaos" yaml:"CompradoridAvaliacaos"`
	VendedoridAvaliacaos            AvaliacaoSlice             `boil:"VendedoridAvaliacaos" json:"VendedoridAvaliacaos" toml:"VendedoridAvaliacaos" yaml:"VendedoridAvaliacaos"`
	UseridMovimentofinanceiros      MovimentofinanceiroSlice   `boil:"UseridMovimentofinanceiros" json:"UseridMovimentofinanceiros" toml:"UseridMovimentofinanceiros" yaml:"UseridMovimentofinanceiros"`
	IddovendedorTickets             TicketSlice                `boil:"IddovendedorTickets" json:"IddovendedorTickets" toml:"IddovendedorTickets" yaml:"IddovendedorTickets"`
	IddocompradorTransacaos         TransacaoSlice             `boil:"IddocompradorTransacaos" json:"IddocompradorTransacaos" toml:"IddocompradorTransacaos" yaml:"IddocompradorTransacaos"`
}

// NewStruct creates a new relationship struct
func (*usuarioR) NewStruct() *usuarioR {
	return &usuarioR{}
}

func (r *usuarioR) GetTenantidTenant() *Tenant {
	if r == nil {
		return nil
	}
	return r.TenantidTenant
}

func (r *usuarioR) GetUseridPreferenciasdenotificacao() *Preferenciasdenotificacao {
	if r == nil {
		return nil
	}
	return r.UseridPreferenciasdenotificacao
}

func (r *usuarioR) GetCompradoridAvaliacaos() AvaliacaoSlice {
	if r == nil {
		return nil
	}
	return r.CompradoridAvaliacaos
}

func (r *usuarioR) GetVendedoridAvaliacaos() AvaliacaoSlice {
	if r == nil {
		return nil
	}
	return r.VendedoridAvaliacaos
}

func (r *usuarioR) GetUseridMovimentofinanceiros() MovimentofinanceiroSlice {
	if r == nil {
		return nil
	}
	return r.UseridMovimentofinanceiros
}

func (r *usuarioR) GetIddovendedorTickets() TicketSlice {
	if r == nil {
		return nil
	}
	return r.IddovendedorTickets
}

func (r *usuarioR) GetIddocompradorTransacaos() TransacaoSlice {
	if r == nil {
		return nil
	}
	return r.IddocompradorTransacaos
}

// usuarioL is where Load methods for each relationship are stored.
type usuarioL struct{}

var (
	usuarioAllColumns            = []string{"userid", "tenantid", "nome", "email"}
	usuarioColumnsWithoutDefault = []string{"tenantid", "nome", "email"}
	usuarioColumnsWithDefault    = []string{"userid"}
	usuarioPrimaryKeyColumns     = []string{"userid"}
	usuarioGeneratedColumns      = []string{}
)

type (
	// UsuarioSlice is an alias for a slice of pointers to Usuario.
	// This should almost always be used instead of []Usuario.
	UsuarioSlice []*Usuario
	// UsuarioHook is the signature for custom Usuario hook methods
	UsuarioHook func(context.Context, boil.ContextExecutor, *Usuario) error

	usuarioQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usuarioType                 = reflect.TypeOf(&Usuario{})
	usuarioMapping              = queries.MakeStructMapping(usuarioType)
	usuarioPrimaryKeyMapping, _ = queries.BindMapping(usuarioType, usuarioMapping, usuarioPrimaryKeyColumns)
	usuarioInsertCacheMut       sync.RWMutex
	usuarioInsertCache          = make(map[string]insertCache)
	usuarioUpdateCacheMut       sync.RWMutex
	usuarioUpdateCache          = make(map[string]updateCache)
	usuarioUpsertCacheMut       sync.RWMutex
	usuarioUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usuarioAfterSelectMu sync.Mutex
var usuarioAfterSelectHooks []UsuarioHook

var usuarioBeforeInsertMu sync.Mutex
var usuarioBeforeInsertHooks []UsuarioHook
var usuarioAfterInsertMu sync.Mutex
var usuarioAfterInsertHooks []UsuarioHook

var usuarioBeforeUpdateMu sync.Mutex
var usuarioBeforeUpdateHooks []UsuarioHook
var usuarioAfterUpdateMu sync.Mutex
var usuarioAfterUpdateHooks []UsuarioHook

var usuarioBeforeDeleteMu sync.Mutex
var usuarioBeforeDeleteHooks []UsuarioHook
var usuarioAfterDeleteMu sync.Mutex
var usuarioAfterDeleteHooks []UsuarioHook

var usuarioBeforeUpsertMu sync.Mutex
var usuarioBeforeUpsertHooks []UsuarioHook
var usuarioAfterUpsertMu sync.Mutex
var usuarioAfterUpsertHooks []UsuarioHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Usuario) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usuarioAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Usuario) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usuarioBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Usuario) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usuarioAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Usuario) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usuarioBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Usuario) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usuarioAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Usuario) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usuarioBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Usuario) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usuarioAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Usuario) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usuarioBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Usuario) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usuarioAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsuarioHook registers your hook function for all future operations.
func AddUsuarioHook(hookPoint boil.HookPoint, usuarioHook UsuarioHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		usuarioAfterSelectMu.Lock()
		usuarioAfterSelectHooks = append(usuarioAfterSelectHooks, usuarioHook)
		usuarioAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		usuarioBeforeInsertMu.Lock()
		usuarioBeforeInsertHooks = append(usuarioBeforeInsertHooks, usuarioHook)
		usuarioBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		usuarioAfterInsertMu.Lock()
		usuarioAfterInsertHooks = append(usuarioAfterInsertHooks, usuarioHook)
		usuarioAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		usuarioBeforeUpdateMu.Lock()
		usuarioBeforeUpdateHooks = append(usuarioBeforeUpdateHooks, usuarioHook)
		usuarioBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		usuarioAfterUpdateMu.Lock()
		usuarioAfterUpdateHooks = append(usuarioAfterUpdateHooks, usuarioHook)
		usuarioAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		usuarioBeforeDeleteMu.Lock()
		usuarioBeforeDeleteHooks = append(usuarioBeforeDeleteHooks, usuarioHook)
		usuarioBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		usuarioAfterDeleteMu.Lock()
		usuarioAfterDeleteHooks = append(usuarioAfterDeleteHooks, usuarioHook)
		usuarioAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		usuarioBeforeUpsertMu.Lock()
		usuarioBeforeUpsertHooks = append(usuarioBeforeUpsertHooks, usuarioHook)
		usuarioBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		usuarioAfterUpsertMu.Lock()
		usuarioAfterUpsertHooks = append(usuarioAfterUpsertHooks, usuarioHook)
		usuarioAfterUpsertMu.Unlock()
	}
}

// One returns a single usuario record from the query.
func (q usuarioQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Usuario, error) {
	o := &Usuario{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for usuario")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Usuario records from the query.
func (q usuarioQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsuarioSlice, error) {
	var o []*Usuario

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Usuario slice")
	}

	if len(usuarioAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Usuario records in the query.
func (q usuarioQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count usuario rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usuarioQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if usuario exists")
	}

	return count > 0, nil
}

// TenantidTenant pointed to by the foreign key.
func (o *Usuario) TenantidTenant(mods ...qm.QueryMod) tenantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"tenantid\" = ?", o.Tenantid),
	}

	queryMods = append(queryMods, mods...)

	return Tenants(queryMods...)
}

// UseridPreferenciasdenotificacao pointed to by the foreign key.
func (o *Usuario) UseridPreferenciasdenotificacao(mods ...qm.QueryMod) preferenciasdenotificacaoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"userid\" = ?", o.Userid),
	}

	queryMods = append(queryMods, mods...)

	return Preferenciasdenotificacaos(queryMods...)
}

// CompradoridAvaliacaos retrieves all the avaliacao's Avaliacaos with an executor via compradorid column.
func (o *Usuario) CompradoridAvaliacaos(mods ...qm.QueryMod) avaliacaoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"avaliacao\".\"compradorid\"=?", o.Userid),
	)

	return Avaliacaos(queryMods...)
}

// VendedoridAvaliacaos retrieves all the avaliacao's Avaliacaos with an executor via vendedorid column.
func (o *Usuario) VendedoridAvaliacaos(mods ...qm.QueryMod) avaliacaoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"avaliacao\".\"vendedorid\"=?", o.Userid),
	)

	return Avaliacaos(queryMods...)
}

// UseridMovimentofinanceiros retrieves all the movimentofinanceiro's Movimentofinanceiros with an executor via userid column.
func (o *Usuario) UseridMovimentofinanceiros(mods ...qm.QueryMod) movimentofinanceiroQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"movimentofinanceiro\".\"userid\"=?", o.Userid),
	)

	return Movimentofinanceiros(queryMods...)
}

// IddovendedorTickets retrieves all the ticket's Tickets with an executor via iddovendedor column.
func (o *Usuario) IddovendedorTickets(mods ...qm.QueryMod) ticketQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"ticket\".\"iddovendedor\"=?", o.Userid),
	)

	return Tickets(queryMods...)
}

// IddocompradorTransacaos retrieves all the transacao's Transacaos with an executor via iddocomprador column.
func (o *Usuario) IddocompradorTransacaos(mods ...qm.QueryMod) transacaoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"transacao\".\"iddocomprador\"=?", o.Userid),
	)

	return Transacaos(queryMods...)
}

// LoadTenantidTenant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usuarioL) LoadTenantidTenant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsuario interface{}, mods queries.Applicator) error {
	var slice []*Usuario
	var object *Usuario

	if singular {
		var ok bool
		object, ok = maybeUsuario.(*Usuario)
		if !ok {
			object = new(Usuario)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUsuario)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUsuario))
			}
		}
	} else {
		s, ok := maybeUsuario.(*[]*Usuario)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUsuario)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUsuario))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &usuarioR{}
		}
		args[object.Tenantid] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usuarioR{}
			}

			args[obj.Tenantid] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tenant`),
		qm.WhereIn(`tenant.tenantid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tenant")
	}

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tenant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tenant")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenant")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TenantidTenant = foreign
		if foreign.R == nil {
			foreign.R = &tenantR{}
		}
		foreign.R.TenantidUsuarios = append(foreign.R.TenantidUsuarios, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Tenantid == foreign.Tenantid {
				local.R.TenantidTenant = foreign
				if foreign.R == nil {
					foreign.R = &tenantR{}
				}
				foreign.R.TenantidUsuarios = append(foreign.R.TenantidUsuarios, local)
				break
			}
		}
	}

	return nil
}

// LoadUseridPreferenciasdenotificacao allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (usuarioL) LoadUseridPreferenciasdenotificacao(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsuario interface{}, mods queries.Applicator) error {
	var slice []*Usuario
	var object *Usuario

	if singular {
		var ok bool
		object, ok = maybeUsuario.(*Usuario)
		if !ok {
			object = new(Usuario)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUsuario)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUsuario))
			}
		}
	} else {
		s, ok := maybeUsuario.(*[]*Usuario)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUsuario)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUsuario))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &usuarioR{}
		}
		args[object.Userid] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usuarioR{}
			}

			args[obj.Userid] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`preferenciasdenotificacao`),
		qm.WhereIn(`preferenciasdenotificacao.userid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Preferenciasdenotificacao")
	}

	var resultSlice []*Preferenciasdenotificacao
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Preferenciasdenotificacao")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for preferenciasdenotificacao")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for preferenciasdenotificacao")
	}

	if len(preferenciasdenotificacaoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UseridPreferenciasdenotificacao = foreign
		if foreign.R == nil {
			foreign.R = &preferenciasdenotificacaoR{}
		}
		foreign.R.UseridUsuario = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Userid == foreign.Userid {
				local.R.UseridPreferenciasdenotificacao = foreign
				if foreign.R == nil {
					foreign.R = &preferenciasdenotificacaoR{}
				}
				foreign.R.UseridUsuario = local
				break
			}
		}
	}

	return nil
}

// LoadCompradoridAvaliacaos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (usuarioL) LoadCompradoridAvaliacaos(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsuario interface{}, mods queries.Applicator) error {
	var slice []*Usuario
	var object *Usuario

	if singular {
		var ok bool
		object, ok = maybeUsuario.(*Usuario)
		if !ok {
			object = new(Usuario)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUsuario)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUsuario))
			}
		}
	} else {
		s, ok := maybeUsuario.(*[]*Usuario)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUsuario)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUsuario))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &usuarioR{}
		}
		args[object.Userid] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usuarioR{}
			}
			args[obj.Userid] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`avaliacao`),
		qm.WhereIn(`avaliacao.compradorid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load avaliacao")
	}

	var resultSlice []*Avaliacao
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice avaliacao")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on avaliacao")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for avaliacao")
	}

	if len(avaliacaoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CompradoridAvaliacaos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &avaliacaoR{}
			}
			foreign.R.CompradoridUsuario = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Userid == foreign.Compradorid {
				local.R.CompradoridAvaliacaos = append(local.R.CompradoridAvaliacaos, foreign)
				if foreign.R == nil {
					foreign.R = &avaliacaoR{}
				}
				foreign.R.CompradoridUsuario = local
				break
			}
		}
	}

	return nil
}

// LoadVendedoridAvaliacaos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (usuarioL) LoadVendedoridAvaliacaos(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsuario interface{}, mods queries.Applicator) error {
	var slice []*Usuario
	var object *Usuario

	if singular {
		var ok bool
		object, ok = maybeUsuario.(*Usuario)
		if !ok {
			object = new(Usuario)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUsuario)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUsuario))
			}
		}
	} else {
		s, ok := maybeUsuario.(*[]*Usuario)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUsuario)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUsuario))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &usuarioR{}
		}
		args[object.Userid] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usuarioR{}
			}
			args[obj.Userid] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`avaliacao`),
		qm.WhereIn(`avaliacao.vendedorid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load avaliacao")
	}

	var resultSlice []*Avaliacao
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice avaliacao")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on avaliacao")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for avaliacao")
	}

	if len(avaliacaoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VendedoridAvaliacaos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &avaliacaoR{}
			}
			foreign.R.VendedoridUsuario = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Userid == foreign.Vendedorid {
				local.R.VendedoridAvaliacaos = append(local.R.VendedoridAvaliacaos, foreign)
				if foreign.R == nil {
					foreign.R = &avaliacaoR{}
				}
				foreign.R.VendedoridUsuario = local
				break
			}
		}
	}

	return nil
}

// LoadUseridMovimentofinanceiros allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (usuarioL) LoadUseridMovimentofinanceiros(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsuario interface{}, mods queries.Applicator) error {
	var slice []*Usuario
	var object *Usuario

	if singular {
		var ok bool
		object, ok = maybeUsuario.(*Usuario)
		if !ok {
			object = new(Usuario)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUsuario)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUsuario))
			}
		}
	} else {
		s, ok := maybeUsuario.(*[]*Usuario)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUsuario)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUsuario))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &usuarioR{}
		}
		args[object.Userid] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usuarioR{}
			}
			args[obj.Userid] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`movimentofinanceiro`),
		qm.WhereIn(`movimentofinanceiro.userid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load movimentofinanceiro")
	}

	var resultSlice []*Movimentofinanceiro
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice movimentofinanceiro")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on movimentofinanceiro")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for movimentofinanceiro")
	}

	if len(movimentofinanceiroAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UseridMovimentofinanceiros = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &movimentofinanceiroR{}
			}
			foreign.R.UseridUsuario = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Userid == foreign.Userid {
				local.R.UseridMovimentofinanceiros = append(local.R.UseridMovimentofinanceiros, foreign)
				if foreign.R == nil {
					foreign.R = &movimentofinanceiroR{}
				}
				foreign.R.UseridUsuario = local
				break
			}
		}
	}

	return nil
}

// LoadIddovendedorTickets allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (usuarioL) LoadIddovendedorTickets(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsuario interface{}, mods queries.Applicator) error {
	var slice []*Usuario
	var object *Usuario

	if singular {
		var ok bool
		object, ok = maybeUsuario.(*Usuario)
		if !ok {
			object = new(Usuario)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUsuario)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUsuario))
			}
		}
	} else {
		s, ok := maybeUsuario.(*[]*Usuario)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUsuario)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUsuario))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &usuarioR{}
		}
		args[object.Userid] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usuarioR{}
			}
			args[obj.Userid] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`ticket`),
		qm.WhereIn(`ticket.iddovendedor in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ticket")
	}

	var resultSlice []*Ticket
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ticket")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on ticket")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ticket")
	}

	if len(ticketAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IddovendedorTickets = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &ticketR{}
			}
			foreign.R.IddovendedorUsuario = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Userid == foreign.Iddovendedor {
				local.R.IddovendedorTickets = append(local.R.IddovendedorTickets, foreign)
				if foreign.R == nil {
					foreign.R = &ticketR{}
				}
				foreign.R.IddovendedorUsuario = local
				break
			}
		}
	}

	return nil
}

// LoadIddocompradorTransacaos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (usuarioL) LoadIddocompradorTransacaos(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsuario interface{}, mods queries.Applicator) error {
	var slice []*Usuario
	var object *Usuario

	if singular {
		var ok bool
		object, ok = maybeUsuario.(*Usuario)
		if !ok {
			object = new(Usuario)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUsuario)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUsuario))
			}
		}
	} else {
		s, ok := maybeUsuario.(*[]*Usuario)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUsuario)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUsuario))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &usuarioR{}
		}
		args[object.Userid] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usuarioR{}
			}
			args[obj.Userid] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`transacao`),
		qm.WhereIn(`transacao.iddocomprador in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transacao")
	}

	var resultSlice []*Transacao
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transacao")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on transacao")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transacao")
	}

	if len(transacaoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IddocompradorTransacaos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &transacaoR{}
			}
			foreign.R.IddocompradorUsuario = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Userid == foreign.Iddocomprador {
				local.R.IddocompradorTransacaos = append(local.R.IddocompradorTransacaos, foreign)
				if foreign.R == nil {
					foreign.R = &transacaoR{}
				}
				foreign.R.IddocompradorUsuario = local
				break
			}
		}
	}

	return nil
}

// SetTenantidTenant of the usuario to the related item.
// Sets o.R.TenantidTenant to related.
// Adds o to related.R.TenantidUsuarios.
func (o *Usuario) SetTenantidTenant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tenant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"usuario\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tenantid"}),
		strmangle.WhereClause("\"", "\"", 2, usuarioPrimaryKeyColumns),
	)
	values := []interface{}{related.Tenantid, o.Userid}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Tenantid = related.Tenantid
	if o.R == nil {
		o.R = &usuarioR{
			TenantidTenant: related,
		}
	} else {
		o.R.TenantidTenant = related
	}

	if related.R == nil {
		related.R = &tenantR{
			TenantidUsuarios: UsuarioSlice{o},
		}
	} else {
		related.R.TenantidUsuarios = append(related.R.TenantidUsuarios, o)
	}

	return nil
}

// SetUseridPreferenciasdenotificacao of the usuario to the related item.
// Sets o.R.UseridPreferenciasdenotificacao to related.
// Adds o to related.R.UseridUsuario.
func (o *Usuario) SetUseridPreferenciasdenotificacao(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Preferenciasdenotificacao) error {
	var err error

	if insert {
		related.Userid = o.Userid

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"preferenciasdenotificacao\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"userid"}),
			strmangle.WhereClause("\"", "\"", 2, preferenciasdenotificacaoPrimaryKeyColumns),
		)
		values := []interface{}{o.Userid, related.Preferenciasid}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.Userid = o.Userid
	}

	if o.R == nil {
		o.R = &usuarioR{
			UseridPreferenciasdenotificacao: related,
		}
	} else {
		o.R.UseridPreferenciasdenotificacao = related
	}

	if related.R == nil {
		related.R = &preferenciasdenotificacaoR{
			UseridUsuario: o,
		}
	} else {
		related.R.UseridUsuario = o
	}
	return nil
}

// AddCompradoridAvaliacaos adds the given related objects to the existing relationships
// of the usuario, optionally inserting them as new records.
// Appends related to o.R.CompradoridAvaliacaos.
// Sets related.R.CompradoridUsuario appropriately.
func (o *Usuario) AddCompradoridAvaliacaos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Avaliacao) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Compradorid = o.Userid
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"avaliacao\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"compradorid"}),
				strmangle.WhereClause("\"", "\"", 2, avaliacaoPrimaryKeyColumns),
			)
			values := []interface{}{o.Userid, rel.Avaliacaoid}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Compradorid = o.Userid
		}
	}

	if o.R == nil {
		o.R = &usuarioR{
			CompradoridAvaliacaos: related,
		}
	} else {
		o.R.CompradoridAvaliacaos = append(o.R.CompradoridAvaliacaos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &avaliacaoR{
				CompradoridUsuario: o,
			}
		} else {
			rel.R.CompradoridUsuario = o
		}
	}
	return nil
}

// AddVendedoridAvaliacaos adds the given related objects to the existing relationships
// of the usuario, optionally inserting them as new records.
// Appends related to o.R.VendedoridAvaliacaos.
// Sets related.R.VendedoridUsuario appropriately.
func (o *Usuario) AddVendedoridAvaliacaos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Avaliacao) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Vendedorid = o.Userid
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"avaliacao\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"vendedorid"}),
				strmangle.WhereClause("\"", "\"", 2, avaliacaoPrimaryKeyColumns),
			)
			values := []interface{}{o.Userid, rel.Avaliacaoid}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Vendedorid = o.Userid
		}
	}

	if o.R == nil {
		o.R = &usuarioR{
			VendedoridAvaliacaos: related,
		}
	} else {
		o.R.VendedoridAvaliacaos = append(o.R.VendedoridAvaliacaos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &avaliacaoR{
				VendedoridUsuario: o,
			}
		} else {
			rel.R.VendedoridUsuario = o
		}
	}
	return nil
}

// AddUseridMovimentofinanceiros adds the given related objects to the existing relationships
// of the usuario, optionally inserting them as new records.
// Appends related to o.R.UseridMovimentofinanceiros.
// Sets related.R.UseridUsuario appropriately.
func (o *Usuario) AddUseridMovimentofinanceiros(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Movimentofinanceiro) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Userid = o.Userid
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"movimentofinanceiro\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"userid"}),
				strmangle.WhereClause("\"", "\"", 2, movimentofinanceiroPrimaryKeyColumns),
			)
			values := []interface{}{o.Userid, rel.Movimentoid}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Userid = o.Userid
		}
	}

	if o.R == nil {
		o.R = &usuarioR{
			UseridMovimentofinanceiros: related,
		}
	} else {
		o.R.UseridMovimentofinanceiros = append(o.R.UseridMovimentofinanceiros, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &movimentofinanceiroR{
				UseridUsuario: o,
			}
		} else {
			rel.R.UseridUsuario = o
		}
	}
	return nil
}

// AddIddovendedorTickets adds the given related objects to the existing relationships
// of the usuario, optionally inserting them as new records.
// Appends related to o.R.IddovendedorTickets.
// Sets related.R.IddovendedorUsuario appropriately.
func (o *Usuario) AddIddovendedorTickets(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Ticket) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Iddovendedor = o.Userid
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"ticket\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"iddovendedor"}),
				strmangle.WhereClause("\"", "\"", 2, ticketPrimaryKeyColumns),
			)
			values := []interface{}{o.Userid, rel.Ticketid}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Iddovendedor = o.Userid
		}
	}

	if o.R == nil {
		o.R = &usuarioR{
			IddovendedorTickets: related,
		}
	} else {
		o.R.IddovendedorTickets = append(o.R.IddovendedorTickets, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &ticketR{
				IddovendedorUsuario: o,
			}
		} else {
			rel.R.IddovendedorUsuario = o
		}
	}
	return nil
}

// AddIddocompradorTransacaos adds the given related objects to the existing relationships
// of the usuario, optionally inserting them as new records.
// Appends related to o.R.IddocompradorTransacaos.
// Sets related.R.IddocompradorUsuario appropriately.
func (o *Usuario) AddIddocompradorTransacaos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Transacao) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Iddocomprador = o.Userid
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"transacao\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"iddocomprador"}),
				strmangle.WhereClause("\"", "\"", 2, transacaoPrimaryKeyColumns),
			)
			values := []interface{}{o.Userid, rel.Transacaoid}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Iddocomprador = o.Userid
		}
	}

	if o.R == nil {
		o.R = &usuarioR{
			IddocompradorTransacaos: related,
		}
	} else {
		o.R.IddocompradorTransacaos = append(o.R.IddocompradorTransacaos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transacaoR{
				IddocompradorUsuario: o,
			}
		} else {
			rel.R.IddocompradorUsuario = o
		}
	}
	return nil
}

// Usuarios retrieves all the records using an executor.
func Usuarios(mods ...qm.QueryMod) usuarioQuery {
	mods = append(mods, qm.From("\"usuario\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"usuario\".*"})
	}

	return usuarioQuery{q}
}

// FindUsuario retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsuario(ctx context.Context, exec boil.ContextExecutor, userid int, selectCols ...string) (*Usuario, error) {
	usuarioObj := &Usuario{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"usuario\" where \"userid\"=$1", sel,
	)

	q := queries.Raw(query, userid)

	err := q.Bind(ctx, exec, usuarioObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from usuario")
	}

	if err = usuarioObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usuarioObj, err
	}

	return usuarioObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Usuario) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usuario provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usuarioColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usuarioInsertCacheMut.RLock()
	cache, cached := usuarioInsertCache[key]
	usuarioInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usuarioAllColumns,
			usuarioColumnsWithDefault,
			usuarioColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usuarioType, usuarioMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usuarioType, usuarioMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"usuario\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"usuario\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into usuario")
	}

	if !cached {
		usuarioInsertCacheMut.Lock()
		usuarioInsertCache[key] = cache
		usuarioInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Usuario.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Usuario) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usuarioUpdateCacheMut.RLock()
	cache, cached := usuarioUpdateCache[key]
	usuarioUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usuarioAllColumns,
			usuarioPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update usuario, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"usuario\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usuarioPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usuarioType, usuarioMapping, append(wl, usuarioPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update usuario row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for usuario")
	}

	if !cached {
		usuarioUpdateCacheMut.Lock()
		usuarioUpdateCache[key] = cache
		usuarioUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usuarioQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for usuario")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for usuario")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsuarioSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usuarioPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"usuario\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usuarioPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in usuario slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all usuario")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Usuario) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no usuario provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usuarioColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usuarioUpsertCacheMut.RLock()
	cache, cached := usuarioUpsertCache[key]
	usuarioUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			usuarioAllColumns,
			usuarioColumnsWithDefault,
			usuarioColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			usuarioAllColumns,
			usuarioPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert usuario, could not build update column list")
		}

		ret := strmangle.SetComplement(usuarioAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(usuarioPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert usuario, could not build conflict column list")
			}

			conflict = make([]string, len(usuarioPrimaryKeyColumns))
			copy(conflict, usuarioPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"usuario\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(usuarioType, usuarioMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usuarioType, usuarioMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert usuario")
	}

	if !cached {
		usuarioUpsertCacheMut.Lock()
		usuarioUpsertCache[key] = cache
		usuarioUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Usuario record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Usuario) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Usuario provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usuarioPrimaryKeyMapping)
	sql := "DELETE FROM \"usuario\" WHERE \"userid\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from usuario")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for usuario")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usuarioQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no usuarioQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usuario")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usuario")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsuarioSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usuarioBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usuarioPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"usuario\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usuarioPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usuario slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usuario")
	}

	if len(usuarioAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Usuario) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsuario(ctx, exec, o.Userid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsuarioSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsuarioSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usuarioPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"usuario\".* FROM \"usuario\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usuarioPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UsuarioSlice")
	}

	*o = slice

	return nil
}

// UsuarioExists checks if the Usuario row exists.
func UsuarioExists(ctx context.Context, exec boil.ContextExecutor, userid int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"usuario\" where \"userid\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userid)
	}
	row := exec.QueryRowContext(ctx, sql, userid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if usuario exists")
	}

	return exists, nil
}

// Exists checks if the Usuario row exists.
func (o *Usuario) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UsuarioExists(ctx, exec, o.Userid)
}
