// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Preferenciasdenotificacao is an object representing the database table.
type Preferenciasdenotificacao struct {
	Preferenciasid int       `boil:"preferenciasid" json:"preferenciasid" toml:"preferenciasid" yaml:"preferenciasid"`
	Userid         int       `boil:"userid" json:"userid" toml:"userid" yaml:"userid"`
	Receberemails  null.Bool `boil:"receberemails" json:"receberemails,omitempty" toml:"receberemails" yaml:"receberemails,omitempty"`

	R *preferenciasdenotificacaoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L preferenciasdenotificacaoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PreferenciasdenotificacaoColumns = struct {
	Preferenciasid string
	Userid         string
	Receberemails  string
}{
	Preferenciasid: "preferenciasid",
	Userid:         "userid",
	Receberemails:  "receberemails",
}

var PreferenciasdenotificacaoTableColumns = struct {
	Preferenciasid string
	Userid         string
	Receberemails  string
}{
	Preferenciasid: "preferenciasdenotificacao.preferenciasid",
	Userid:         "preferenciasdenotificacao.userid",
	Receberemails:  "preferenciasdenotificacao.receberemails",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var PreferenciasdenotificacaoWhere = struct {
	Preferenciasid whereHelperint
	Userid         whereHelperint
	Receberemails  whereHelpernull_Bool
}{
	Preferenciasid: whereHelperint{field: "\"preferenciasdenotificacao\".\"preferenciasid\""},
	Userid:         whereHelperint{field: "\"preferenciasdenotificacao\".\"userid\""},
	Receberemails:  whereHelpernull_Bool{field: "\"preferenciasdenotificacao\".\"receberemails\""},
}

// PreferenciasdenotificacaoRels is where relationship names are stored.
var PreferenciasdenotificacaoRels = struct {
	UseridUsuario string
}{
	UseridUsuario: "UseridUsuario",
}

// preferenciasdenotificacaoR is where relationships are stored.
type preferenciasdenotificacaoR struct {
	UseridUsuario *Usuario `boil:"UseridUsuario" json:"UseridUsuario" toml:"UseridUsuario" yaml:"UseridUsuario"`
}

// NewStruct creates a new relationship struct
func (*preferenciasdenotificacaoR) NewStruct() *preferenciasdenotificacaoR {
	return &preferenciasdenotificacaoR{}
}

func (r *preferenciasdenotificacaoR) GetUseridUsuario() *Usuario {
	if r == nil {
		return nil
	}
	return r.UseridUsuario
}

// preferenciasdenotificacaoL is where Load methods for each relationship are stored.
type preferenciasdenotificacaoL struct{}

var (
	preferenciasdenotificacaoAllColumns            = []string{"preferenciasid", "userid", "receberemails"}
	preferenciasdenotificacaoColumnsWithoutDefault = []string{"userid"}
	preferenciasdenotificacaoColumnsWithDefault    = []string{"preferenciasid", "receberemails"}
	preferenciasdenotificacaoPrimaryKeyColumns     = []string{"preferenciasid"}
	preferenciasdenotificacaoGeneratedColumns      = []string{}
)

type (
	// PreferenciasdenotificacaoSlice is an alias for a slice of pointers to Preferenciasdenotificacao.
	// This should almost always be used instead of []Preferenciasdenotificacao.
	PreferenciasdenotificacaoSlice []*Preferenciasdenotificacao
	// PreferenciasdenotificacaoHook is the signature for custom Preferenciasdenotificacao hook methods
	PreferenciasdenotificacaoHook func(context.Context, boil.ContextExecutor, *Preferenciasdenotificacao) error

	preferenciasdenotificacaoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	preferenciasdenotificacaoType                 = reflect.TypeOf(&Preferenciasdenotificacao{})
	preferenciasdenotificacaoMapping              = queries.MakeStructMapping(preferenciasdenotificacaoType)
	preferenciasdenotificacaoPrimaryKeyMapping, _ = queries.BindMapping(preferenciasdenotificacaoType, preferenciasdenotificacaoMapping, preferenciasdenotificacaoPrimaryKeyColumns)
	preferenciasdenotificacaoInsertCacheMut       sync.RWMutex
	preferenciasdenotificacaoInsertCache          = make(map[string]insertCache)
	preferenciasdenotificacaoUpdateCacheMut       sync.RWMutex
	preferenciasdenotificacaoUpdateCache          = make(map[string]updateCache)
	preferenciasdenotificacaoUpsertCacheMut       sync.RWMutex
	preferenciasdenotificacaoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var preferenciasdenotificacaoAfterSelectMu sync.Mutex
var preferenciasdenotificacaoAfterSelectHooks []PreferenciasdenotificacaoHook

var preferenciasdenotificacaoBeforeInsertMu sync.Mutex
var preferenciasdenotificacaoBeforeInsertHooks []PreferenciasdenotificacaoHook
var preferenciasdenotificacaoAfterInsertMu sync.Mutex
var preferenciasdenotificacaoAfterInsertHooks []PreferenciasdenotificacaoHook

var preferenciasdenotificacaoBeforeUpdateMu sync.Mutex
var preferenciasdenotificacaoBeforeUpdateHooks []PreferenciasdenotificacaoHook
var preferenciasdenotificacaoAfterUpdateMu sync.Mutex
var preferenciasdenotificacaoAfterUpdateHooks []PreferenciasdenotificacaoHook

var preferenciasdenotificacaoBeforeDeleteMu sync.Mutex
var preferenciasdenotificacaoBeforeDeleteHooks []PreferenciasdenotificacaoHook
var preferenciasdenotificacaoAfterDeleteMu sync.Mutex
var preferenciasdenotificacaoAfterDeleteHooks []PreferenciasdenotificacaoHook

var preferenciasdenotificacaoBeforeUpsertMu sync.Mutex
var preferenciasdenotificacaoBeforeUpsertHooks []PreferenciasdenotificacaoHook
var preferenciasdenotificacaoAfterUpsertMu sync.Mutex
var preferenciasdenotificacaoAfterUpsertHooks []PreferenciasdenotificacaoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Preferenciasdenotificacao) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range preferenciasdenotificacaoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Preferenciasdenotificacao) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range preferenciasdenotificacaoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Preferenciasdenotificacao) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range preferenciasdenotificacaoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Preferenciasdenotificacao) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range preferenciasdenotificacaoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Preferenciasdenotificacao) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range preferenciasdenotificacaoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Preferenciasdenotificacao) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range preferenciasdenotificacaoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Preferenciasdenotificacao) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range preferenciasdenotificacaoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Preferenciasdenotificacao) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range preferenciasdenotificacaoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Preferenciasdenotificacao) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range preferenciasdenotificacaoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPreferenciasdenotificacaoHook registers your hook function for all future operations.
func AddPreferenciasdenotificacaoHook(hookPoint boil.HookPoint, preferenciasdenotificacaoHook PreferenciasdenotificacaoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		preferenciasdenotificacaoAfterSelectMu.Lock()
		preferenciasdenotificacaoAfterSelectHooks = append(preferenciasdenotificacaoAfterSelectHooks, preferenciasdenotificacaoHook)
		preferenciasdenotificacaoAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		preferenciasdenotificacaoBeforeInsertMu.Lock()
		preferenciasdenotificacaoBeforeInsertHooks = append(preferenciasdenotificacaoBeforeInsertHooks, preferenciasdenotificacaoHook)
		preferenciasdenotificacaoBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		preferenciasdenotificacaoAfterInsertMu.Lock()
		preferenciasdenotificacaoAfterInsertHooks = append(preferenciasdenotificacaoAfterInsertHooks, preferenciasdenotificacaoHook)
		preferenciasdenotificacaoAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		preferenciasdenotificacaoBeforeUpdateMu.Lock()
		preferenciasdenotificacaoBeforeUpdateHooks = append(preferenciasdenotificacaoBeforeUpdateHooks, preferenciasdenotificacaoHook)
		preferenciasdenotificacaoBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		preferenciasdenotificacaoAfterUpdateMu.Lock()
		preferenciasdenotificacaoAfterUpdateHooks = append(preferenciasdenotificacaoAfterUpdateHooks, preferenciasdenotificacaoHook)
		preferenciasdenotificacaoAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		preferenciasdenotificacaoBeforeDeleteMu.Lock()
		preferenciasdenotificacaoBeforeDeleteHooks = append(preferenciasdenotificacaoBeforeDeleteHooks, preferenciasdenotificacaoHook)
		preferenciasdenotificacaoBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		preferenciasdenotificacaoAfterDeleteMu.Lock()
		preferenciasdenotificacaoAfterDeleteHooks = append(preferenciasdenotificacaoAfterDeleteHooks, preferenciasdenotificacaoHook)
		preferenciasdenotificacaoAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		preferenciasdenotificacaoBeforeUpsertMu.Lock()
		preferenciasdenotificacaoBeforeUpsertHooks = append(preferenciasdenotificacaoBeforeUpsertHooks, preferenciasdenotificacaoHook)
		preferenciasdenotificacaoBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		preferenciasdenotificacaoAfterUpsertMu.Lock()
		preferenciasdenotificacaoAfterUpsertHooks = append(preferenciasdenotificacaoAfterUpsertHooks, preferenciasdenotificacaoHook)
		preferenciasdenotificacaoAfterUpsertMu.Unlock()
	}
}

// One returns a single preferenciasdenotificacao record from the query.
func (q preferenciasdenotificacaoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Preferenciasdenotificacao, error) {
	o := &Preferenciasdenotificacao{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for preferenciasdenotificacao")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Preferenciasdenotificacao records from the query.
func (q preferenciasdenotificacaoQuery) All(ctx context.Context, exec boil.ContextExecutor) (PreferenciasdenotificacaoSlice, error) {
	var o []*Preferenciasdenotificacao

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Preferenciasdenotificacao slice")
	}

	if len(preferenciasdenotificacaoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Preferenciasdenotificacao records in the query.
func (q preferenciasdenotificacaoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count preferenciasdenotificacao rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q preferenciasdenotificacaoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if preferenciasdenotificacao exists")
	}

	return count > 0, nil
}

// UseridUsuario pointed to by the foreign key.
func (o *Preferenciasdenotificacao) UseridUsuario(mods ...qm.QueryMod) usuarioQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"userid\" = ?", o.Userid),
	}

	queryMods = append(queryMods, mods...)

	return Usuarios(queryMods...)
}

// LoadUseridUsuario allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (preferenciasdenotificacaoL) LoadUseridUsuario(ctx context.Context, e boil.ContextExecutor, singular bool, maybePreferenciasdenotificacao interface{}, mods queries.Applicator) error {
	var slice []*Preferenciasdenotificacao
	var object *Preferenciasdenotificacao

	if singular {
		var ok bool
		object, ok = maybePreferenciasdenotificacao.(*Preferenciasdenotificacao)
		if !ok {
			object = new(Preferenciasdenotificacao)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePreferenciasdenotificacao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePreferenciasdenotificacao))
			}
		}
	} else {
		s, ok := maybePreferenciasdenotificacao.(*[]*Preferenciasdenotificacao)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePreferenciasdenotificacao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePreferenciasdenotificacao))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &preferenciasdenotificacaoR{}
		}
		args[object.Userid] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &preferenciasdenotificacaoR{}
			}

			args[obj.Userid] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`usuario`),
		qm.WhereIn(`usuario.userid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Usuario")
	}

	var resultSlice []*Usuario
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Usuario")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for usuario")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usuario")
	}

	if len(usuarioAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UseridUsuario = foreign
		if foreign.R == nil {
			foreign.R = &usuarioR{}
		}
		foreign.R.UseridPreferenciasdenotificacao = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Userid == foreign.Userid {
				local.R.UseridUsuario = foreign
				if foreign.R == nil {
					foreign.R = &usuarioR{}
				}
				foreign.R.UseridPreferenciasdenotificacao = local
				break
			}
		}
	}

	return nil
}

// SetUseridUsuario of the preferenciasdenotificacao to the related item.
// Sets o.R.UseridUsuario to related.
// Adds o to related.R.UseridPreferenciasdenotificacao.
func (o *Preferenciasdenotificacao) SetUseridUsuario(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Usuario) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"preferenciasdenotificacao\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"userid"}),
		strmangle.WhereClause("\"", "\"", 2, preferenciasdenotificacaoPrimaryKeyColumns),
	)
	values := []interface{}{related.Userid, o.Preferenciasid}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Userid = related.Userid
	if o.R == nil {
		o.R = &preferenciasdenotificacaoR{
			UseridUsuario: related,
		}
	} else {
		o.R.UseridUsuario = related
	}

	if related.R == nil {
		related.R = &usuarioR{
			UseridPreferenciasdenotificacao: o,
		}
	} else {
		related.R.UseridPreferenciasdenotificacao = o
	}

	return nil
}

// Preferenciasdenotificacaos retrieves all the records using an executor.
func Preferenciasdenotificacaos(mods ...qm.QueryMod) preferenciasdenotificacaoQuery {
	mods = append(mods, qm.From("\"preferenciasdenotificacao\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"preferenciasdenotificacao\".*"})
	}

	return preferenciasdenotificacaoQuery{q}
}

// FindPreferenciasdenotificacao retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPreferenciasdenotificacao(ctx context.Context, exec boil.ContextExecutor, preferenciasid int, selectCols ...string) (*Preferenciasdenotificacao, error) {
	preferenciasdenotificacaoObj := &Preferenciasdenotificacao{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"preferenciasdenotificacao\" where \"preferenciasid\"=$1", sel,
	)

	q := queries.Raw(query, preferenciasid)

	err := q.Bind(ctx, exec, preferenciasdenotificacaoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from preferenciasdenotificacao")
	}

	if err = preferenciasdenotificacaoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return preferenciasdenotificacaoObj, err
	}

	return preferenciasdenotificacaoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Preferenciasdenotificacao) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no preferenciasdenotificacao provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(preferenciasdenotificacaoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	preferenciasdenotificacaoInsertCacheMut.RLock()
	cache, cached := preferenciasdenotificacaoInsertCache[key]
	preferenciasdenotificacaoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			preferenciasdenotificacaoAllColumns,
			preferenciasdenotificacaoColumnsWithDefault,
			preferenciasdenotificacaoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(preferenciasdenotificacaoType, preferenciasdenotificacaoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(preferenciasdenotificacaoType, preferenciasdenotificacaoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"preferenciasdenotificacao\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"preferenciasdenotificacao\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into preferenciasdenotificacao")
	}

	if !cached {
		preferenciasdenotificacaoInsertCacheMut.Lock()
		preferenciasdenotificacaoInsertCache[key] = cache
		preferenciasdenotificacaoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Preferenciasdenotificacao.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Preferenciasdenotificacao) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	preferenciasdenotificacaoUpdateCacheMut.RLock()
	cache, cached := preferenciasdenotificacaoUpdateCache[key]
	preferenciasdenotificacaoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			preferenciasdenotificacaoAllColumns,
			preferenciasdenotificacaoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update preferenciasdenotificacao, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"preferenciasdenotificacao\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, preferenciasdenotificacaoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(preferenciasdenotificacaoType, preferenciasdenotificacaoMapping, append(wl, preferenciasdenotificacaoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update preferenciasdenotificacao row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for preferenciasdenotificacao")
	}

	if !cached {
		preferenciasdenotificacaoUpdateCacheMut.Lock()
		preferenciasdenotificacaoUpdateCache[key] = cache
		preferenciasdenotificacaoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q preferenciasdenotificacaoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for preferenciasdenotificacao")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for preferenciasdenotificacao")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PreferenciasdenotificacaoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), preferenciasdenotificacaoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"preferenciasdenotificacao\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, preferenciasdenotificacaoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in preferenciasdenotificacao slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all preferenciasdenotificacao")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Preferenciasdenotificacao) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no preferenciasdenotificacao provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(preferenciasdenotificacaoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	preferenciasdenotificacaoUpsertCacheMut.RLock()
	cache, cached := preferenciasdenotificacaoUpsertCache[key]
	preferenciasdenotificacaoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			preferenciasdenotificacaoAllColumns,
			preferenciasdenotificacaoColumnsWithDefault,
			preferenciasdenotificacaoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			preferenciasdenotificacaoAllColumns,
			preferenciasdenotificacaoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert preferenciasdenotificacao, could not build update column list")
		}

		ret := strmangle.SetComplement(preferenciasdenotificacaoAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(preferenciasdenotificacaoPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert preferenciasdenotificacao, could not build conflict column list")
			}

			conflict = make([]string, len(preferenciasdenotificacaoPrimaryKeyColumns))
			copy(conflict, preferenciasdenotificacaoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"preferenciasdenotificacao\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(preferenciasdenotificacaoType, preferenciasdenotificacaoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(preferenciasdenotificacaoType, preferenciasdenotificacaoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert preferenciasdenotificacao")
	}

	if !cached {
		preferenciasdenotificacaoUpsertCacheMut.Lock()
		preferenciasdenotificacaoUpsertCache[key] = cache
		preferenciasdenotificacaoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Preferenciasdenotificacao record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Preferenciasdenotificacao) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Preferenciasdenotificacao provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), preferenciasdenotificacaoPrimaryKeyMapping)
	sql := "DELETE FROM \"preferenciasdenotificacao\" WHERE \"preferenciasid\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from preferenciasdenotificacao")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for preferenciasdenotificacao")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q preferenciasdenotificacaoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no preferenciasdenotificacaoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from preferenciasdenotificacao")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for preferenciasdenotificacao")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PreferenciasdenotificacaoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(preferenciasdenotificacaoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), preferenciasdenotificacaoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"preferenciasdenotificacao\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, preferenciasdenotificacaoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from preferenciasdenotificacao slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for preferenciasdenotificacao")
	}

	if len(preferenciasdenotificacaoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Preferenciasdenotificacao) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPreferenciasdenotificacao(ctx, exec, o.Preferenciasid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PreferenciasdenotificacaoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PreferenciasdenotificacaoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), preferenciasdenotificacaoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"preferenciasdenotificacao\".* FROM \"preferenciasdenotificacao\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, preferenciasdenotificacaoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PreferenciasdenotificacaoSlice")
	}

	*o = slice

	return nil
}

// PreferenciasdenotificacaoExists checks if the Preferenciasdenotificacao row exists.
func PreferenciasdenotificacaoExists(ctx context.Context, exec boil.ContextExecutor, preferenciasid int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"preferenciasdenotificacao\" where \"preferenciasid\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, preferenciasid)
	}
	row := exec.QueryRowContext(ctx, sql, preferenciasid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if preferenciasdenotificacao exists")
	}

	return exists, nil
}

// Exists checks if the Preferenciasdenotificacao row exists.
func (o *Preferenciasdenotificacao) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PreferenciasdenotificacaoExists(ctx, exec, o.Preferenciasid)
}
