// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Transacao is an object representing the database table.
type Transacao struct {
	Transacaoid       int           `boil:"transacaoid" json:"transacaoid" toml:"transacaoid" yaml:"transacaoid"`
	Tenantid          int           `boil:"tenantid" json:"tenantid" toml:"tenantid" yaml:"tenantid"`
	Iddocomprador     int           `boil:"iddocomprador" json:"iddocomprador" toml:"iddocomprador" yaml:"iddocomprador"`
	Iddoticket        int           `boil:"iddoticket" json:"iddoticket" toml:"iddoticket" yaml:"iddoticket"`
	Precodevenda      types.Decimal `boil:"precodevenda" json:"precodevenda" toml:"precodevenda" yaml:"precodevenda"`
	Datadatransacao   null.Time     `boil:"datadatransacao" json:"datadatransacao,omitempty" toml:"datadatransacao" yaml:"datadatransacao,omitempty"`
	Statusdatransacao string        `boil:"statusdatransacao" json:"statusdatransacao" toml:"statusdatransacao" yaml:"statusdatransacao"`

	R *transacaoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L transacaoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TransacaoColumns = struct {
	Transacaoid       string
	Tenantid          string
	Iddocomprador     string
	Iddoticket        string
	Precodevenda      string
	Datadatransacao   string
	Statusdatransacao string
}{
	Transacaoid:       "transacaoid",
	Tenantid:          "tenantid",
	Iddocomprador:     "iddocomprador",
	Iddoticket:        "iddoticket",
	Precodevenda:      "precodevenda",
	Datadatransacao:   "datadatransacao",
	Statusdatransacao: "statusdatransacao",
}

var TransacaoTableColumns = struct {
	Transacaoid       string
	Tenantid          string
	Iddocomprador     string
	Iddoticket        string
	Precodevenda      string
	Datadatransacao   string
	Statusdatransacao string
}{
	Transacaoid:       "transacao.transacaoid",
	Tenantid:          "transacao.tenantid",
	Iddocomprador:     "transacao.iddocomprador",
	Iddoticket:        "transacao.iddoticket",
	Precodevenda:      "transacao.precodevenda",
	Datadatransacao:   "transacao.datadatransacao",
	Statusdatransacao: "transacao.statusdatransacao",
}

// Generated where

var TransacaoWhere = struct {
	Transacaoid       whereHelperint
	Tenantid          whereHelperint
	Iddocomprador     whereHelperint
	Iddoticket        whereHelperint
	Precodevenda      whereHelpertypes_Decimal
	Datadatransacao   whereHelpernull_Time
	Statusdatransacao whereHelperstring
}{
	Transacaoid:       whereHelperint{field: "\"transacao\".\"transacaoid\""},
	Tenantid:          whereHelperint{field: "\"transacao\".\"tenantid\""},
	Iddocomprador:     whereHelperint{field: "\"transacao\".\"iddocomprador\""},
	Iddoticket:        whereHelperint{field: "\"transacao\".\"iddoticket\""},
	Precodevenda:      whereHelpertypes_Decimal{field: "\"transacao\".\"precodevenda\""},
	Datadatransacao:   whereHelpernull_Time{field: "\"transacao\".\"datadatransacao\""},
	Statusdatransacao: whereHelperstring{field: "\"transacao\".\"statusdatransacao\""},
}

// TransacaoRels is where relationship names are stored.
var TransacaoRels = struct {
	IddocompradorUsuario string
	IddoticketTicket     string
	TenantidTenant       string
	TransacaoidAvaliacao string
}{
	IddocompradorUsuario: "IddocompradorUsuario",
	IddoticketTicket:     "IddoticketTicket",
	TenantidTenant:       "TenantidTenant",
	TransacaoidAvaliacao: "TransacaoidAvaliacao",
}

// transacaoR is where relationships are stored.
type transacaoR struct {
	IddocompradorUsuario *Usuario   `boil:"IddocompradorUsuario" json:"IddocompradorUsuario" toml:"IddocompradorUsuario" yaml:"IddocompradorUsuario"`
	IddoticketTicket     *Ticket    `boil:"IddoticketTicket" json:"IddoticketTicket" toml:"IddoticketTicket" yaml:"IddoticketTicket"`
	TenantidTenant       *Tenant    `boil:"TenantidTenant" json:"TenantidTenant" toml:"TenantidTenant" yaml:"TenantidTenant"`
	TransacaoidAvaliacao *Avaliacao `boil:"TransacaoidAvaliacao" json:"TransacaoidAvaliacao" toml:"TransacaoidAvaliacao" yaml:"TransacaoidAvaliacao"`
}

// NewStruct creates a new relationship struct
func (*transacaoR) NewStruct() *transacaoR {
	return &transacaoR{}
}

func (r *transacaoR) GetIddocompradorUsuario() *Usuario {
	if r == nil {
		return nil
	}
	return r.IddocompradorUsuario
}

func (r *transacaoR) GetIddoticketTicket() *Ticket {
	if r == nil {
		return nil
	}
	return r.IddoticketTicket
}

func (r *transacaoR) GetTenantidTenant() *Tenant {
	if r == nil {
		return nil
	}
	return r.TenantidTenant
}

func (r *transacaoR) GetTransacaoidAvaliacao() *Avaliacao {
	if r == nil {
		return nil
	}
	return r.TransacaoidAvaliacao
}

// transacaoL is where Load methods for each relationship are stored.
type transacaoL struct{}

var (
	transacaoAllColumns            = []string{"transacaoid", "tenantid", "iddocomprador", "iddoticket", "precodevenda", "datadatransacao", "statusdatransacao"}
	transacaoColumnsWithoutDefault = []string{"tenantid", "iddocomprador", "iddoticket", "precodevenda", "statusdatransacao"}
	transacaoColumnsWithDefault    = []string{"transacaoid", "datadatransacao"}
	transacaoPrimaryKeyColumns     = []string{"transacaoid"}
	transacaoGeneratedColumns      = []string{}
)

type (
	// TransacaoSlice is an alias for a slice of pointers to Transacao.
	// This should almost always be used instead of []Transacao.
	TransacaoSlice []*Transacao
	// TransacaoHook is the signature for custom Transacao hook methods
	TransacaoHook func(context.Context, boil.ContextExecutor, *Transacao) error

	transacaoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	transacaoType                 = reflect.TypeOf(&Transacao{})
	transacaoMapping              = queries.MakeStructMapping(transacaoType)
	transacaoPrimaryKeyMapping, _ = queries.BindMapping(transacaoType, transacaoMapping, transacaoPrimaryKeyColumns)
	transacaoInsertCacheMut       sync.RWMutex
	transacaoInsertCache          = make(map[string]insertCache)
	transacaoUpdateCacheMut       sync.RWMutex
	transacaoUpdateCache          = make(map[string]updateCache)
	transacaoUpsertCacheMut       sync.RWMutex
	transacaoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var transacaoAfterSelectMu sync.Mutex
var transacaoAfterSelectHooks []TransacaoHook

var transacaoBeforeInsertMu sync.Mutex
var transacaoBeforeInsertHooks []TransacaoHook
var transacaoAfterInsertMu sync.Mutex
var transacaoAfterInsertHooks []TransacaoHook

var transacaoBeforeUpdateMu sync.Mutex
var transacaoBeforeUpdateHooks []TransacaoHook
var transacaoAfterUpdateMu sync.Mutex
var transacaoAfterUpdateHooks []TransacaoHook

var transacaoBeforeDeleteMu sync.Mutex
var transacaoBeforeDeleteHooks []TransacaoHook
var transacaoAfterDeleteMu sync.Mutex
var transacaoAfterDeleteHooks []TransacaoHook

var transacaoBeforeUpsertMu sync.Mutex
var transacaoBeforeUpsertHooks []TransacaoHook
var transacaoAfterUpsertMu sync.Mutex
var transacaoAfterUpsertHooks []TransacaoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Transacao) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transacaoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Transacao) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transacaoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Transacao) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transacaoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Transacao) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transacaoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Transacao) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transacaoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Transacao) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transacaoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Transacao) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transacaoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Transacao) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transacaoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Transacao) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transacaoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTransacaoHook registers your hook function for all future operations.
func AddTransacaoHook(hookPoint boil.HookPoint, transacaoHook TransacaoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		transacaoAfterSelectMu.Lock()
		transacaoAfterSelectHooks = append(transacaoAfterSelectHooks, transacaoHook)
		transacaoAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		transacaoBeforeInsertMu.Lock()
		transacaoBeforeInsertHooks = append(transacaoBeforeInsertHooks, transacaoHook)
		transacaoBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		transacaoAfterInsertMu.Lock()
		transacaoAfterInsertHooks = append(transacaoAfterInsertHooks, transacaoHook)
		transacaoAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		transacaoBeforeUpdateMu.Lock()
		transacaoBeforeUpdateHooks = append(transacaoBeforeUpdateHooks, transacaoHook)
		transacaoBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		transacaoAfterUpdateMu.Lock()
		transacaoAfterUpdateHooks = append(transacaoAfterUpdateHooks, transacaoHook)
		transacaoAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		transacaoBeforeDeleteMu.Lock()
		transacaoBeforeDeleteHooks = append(transacaoBeforeDeleteHooks, transacaoHook)
		transacaoBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		transacaoAfterDeleteMu.Lock()
		transacaoAfterDeleteHooks = append(transacaoAfterDeleteHooks, transacaoHook)
		transacaoAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		transacaoBeforeUpsertMu.Lock()
		transacaoBeforeUpsertHooks = append(transacaoBeforeUpsertHooks, transacaoHook)
		transacaoBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		transacaoAfterUpsertMu.Lock()
		transacaoAfterUpsertHooks = append(transacaoAfterUpsertHooks, transacaoHook)
		transacaoAfterUpsertMu.Unlock()
	}
}

// One returns a single transacao record from the query.
func (q transacaoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Transacao, error) {
	o := &Transacao{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for transacao")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Transacao records from the query.
func (q transacaoQuery) All(ctx context.Context, exec boil.ContextExecutor) (TransacaoSlice, error) {
	var o []*Transacao

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Transacao slice")
	}

	if len(transacaoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Transacao records in the query.
func (q transacaoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count transacao rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q transacaoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if transacao exists")
	}

	return count > 0, nil
}

// IddocompradorUsuario pointed to by the foreign key.
func (o *Transacao) IddocompradorUsuario(mods ...qm.QueryMod) usuarioQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"userid\" = ?", o.Iddocomprador),
	}

	queryMods = append(queryMods, mods...)

	return Usuarios(queryMods...)
}

// IddoticketTicket pointed to by the foreign key.
func (o *Transacao) IddoticketTicket(mods ...qm.QueryMod) ticketQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"ticketid\" = ?", o.Iddoticket),
	}

	queryMods = append(queryMods, mods...)

	return Tickets(queryMods...)
}

// TenantidTenant pointed to by the foreign key.
func (o *Transacao) TenantidTenant(mods ...qm.QueryMod) tenantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"tenantid\" = ?", o.Tenantid),
	}

	queryMods = append(queryMods, mods...)

	return Tenants(queryMods...)
}

// TransacaoidAvaliacao pointed to by the foreign key.
func (o *Transacao) TransacaoidAvaliacao(mods ...qm.QueryMod) avaliacaoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"transacaoid\" = ?", o.Transacaoid),
	}

	queryMods = append(queryMods, mods...)

	return Avaliacaos(queryMods...)
}

// LoadIddocompradorUsuario allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transacaoL) LoadIddocompradorUsuario(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTransacao interface{}, mods queries.Applicator) error {
	var slice []*Transacao
	var object *Transacao

	if singular {
		var ok bool
		object, ok = maybeTransacao.(*Transacao)
		if !ok {
			object = new(Transacao)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTransacao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTransacao))
			}
		}
	} else {
		s, ok := maybeTransacao.(*[]*Transacao)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTransacao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTransacao))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &transacaoR{}
		}
		args[object.Iddocomprador] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transacaoR{}
			}

			args[obj.Iddocomprador] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`usuario`),
		qm.WhereIn(`usuario.userid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Usuario")
	}

	var resultSlice []*Usuario
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Usuario")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for usuario")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usuario")
	}

	if len(usuarioAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IddocompradorUsuario = foreign
		if foreign.R == nil {
			foreign.R = &usuarioR{}
		}
		foreign.R.IddocompradorTransacaos = append(foreign.R.IddocompradorTransacaos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Iddocomprador == foreign.Userid {
				local.R.IddocompradorUsuario = foreign
				if foreign.R == nil {
					foreign.R = &usuarioR{}
				}
				foreign.R.IddocompradorTransacaos = append(foreign.R.IddocompradorTransacaos, local)
				break
			}
		}
	}

	return nil
}

// LoadIddoticketTicket allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transacaoL) LoadIddoticketTicket(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTransacao interface{}, mods queries.Applicator) error {
	var slice []*Transacao
	var object *Transacao

	if singular {
		var ok bool
		object, ok = maybeTransacao.(*Transacao)
		if !ok {
			object = new(Transacao)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTransacao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTransacao))
			}
		}
	} else {
		s, ok := maybeTransacao.(*[]*Transacao)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTransacao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTransacao))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &transacaoR{}
		}
		args[object.Iddoticket] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transacaoR{}
			}

			args[obj.Iddoticket] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`ticket`),
		qm.WhereIn(`ticket.ticketid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Ticket")
	}

	var resultSlice []*Ticket
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Ticket")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for ticket")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ticket")
	}

	if len(ticketAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IddoticketTicket = foreign
		if foreign.R == nil {
			foreign.R = &ticketR{}
		}
		foreign.R.IddoticketTransacao = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Iddoticket == foreign.Ticketid {
				local.R.IddoticketTicket = foreign
				if foreign.R == nil {
					foreign.R = &ticketR{}
				}
				foreign.R.IddoticketTransacao = local
				break
			}
		}
	}

	return nil
}

// LoadTenantidTenant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transacaoL) LoadTenantidTenant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTransacao interface{}, mods queries.Applicator) error {
	var slice []*Transacao
	var object *Transacao

	if singular {
		var ok bool
		object, ok = maybeTransacao.(*Transacao)
		if !ok {
			object = new(Transacao)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTransacao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTransacao))
			}
		}
	} else {
		s, ok := maybeTransacao.(*[]*Transacao)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTransacao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTransacao))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &transacaoR{}
		}
		args[object.Tenantid] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transacaoR{}
			}

			args[obj.Tenantid] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tenant`),
		qm.WhereIn(`tenant.tenantid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tenant")
	}

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tenant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tenant")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenant")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TenantidTenant = foreign
		if foreign.R == nil {
			foreign.R = &tenantR{}
		}
		foreign.R.TenantidTransacaos = append(foreign.R.TenantidTransacaos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Tenantid == foreign.Tenantid {
				local.R.TenantidTenant = foreign
				if foreign.R == nil {
					foreign.R = &tenantR{}
				}
				foreign.R.TenantidTransacaos = append(foreign.R.TenantidTransacaos, local)
				break
			}
		}
	}

	return nil
}

// LoadTransacaoidAvaliacao allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (transacaoL) LoadTransacaoidAvaliacao(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTransacao interface{}, mods queries.Applicator) error {
	var slice []*Transacao
	var object *Transacao

	if singular {
		var ok bool
		object, ok = maybeTransacao.(*Transacao)
		if !ok {
			object = new(Transacao)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTransacao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTransacao))
			}
		}
	} else {
		s, ok := maybeTransacao.(*[]*Transacao)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTransacao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTransacao))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &transacaoR{}
		}
		args[object.Transacaoid] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transacaoR{}
			}

			args[obj.Transacaoid] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`avaliacao`),
		qm.WhereIn(`avaliacao.transacaoid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Avaliacao")
	}

	var resultSlice []*Avaliacao
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Avaliacao")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for avaliacao")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for avaliacao")
	}

	if len(avaliacaoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TransacaoidAvaliacao = foreign
		if foreign.R == nil {
			foreign.R = &avaliacaoR{}
		}
		foreign.R.TransacaoidTransacao = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Transacaoid == foreign.Transacaoid {
				local.R.TransacaoidAvaliacao = foreign
				if foreign.R == nil {
					foreign.R = &avaliacaoR{}
				}
				foreign.R.TransacaoidTransacao = local
				break
			}
		}
	}

	return nil
}

// SetIddocompradorUsuario of the transacao to the related item.
// Sets o.R.IddocompradorUsuario to related.
// Adds o to related.R.IddocompradorTransacaos.
func (o *Transacao) SetIddocompradorUsuario(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Usuario) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transacao\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"iddocomprador"}),
		strmangle.WhereClause("\"", "\"", 2, transacaoPrimaryKeyColumns),
	)
	values := []interface{}{related.Userid, o.Transacaoid}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Iddocomprador = related.Userid
	if o.R == nil {
		o.R = &transacaoR{
			IddocompradorUsuario: related,
		}
	} else {
		o.R.IddocompradorUsuario = related
	}

	if related.R == nil {
		related.R = &usuarioR{
			IddocompradorTransacaos: TransacaoSlice{o},
		}
	} else {
		related.R.IddocompradorTransacaos = append(related.R.IddocompradorTransacaos, o)
	}

	return nil
}

// SetIddoticketTicket of the transacao to the related item.
// Sets o.R.IddoticketTicket to related.
// Adds o to related.R.IddoticketTransacao.
func (o *Transacao) SetIddoticketTicket(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Ticket) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transacao\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"iddoticket"}),
		strmangle.WhereClause("\"", "\"", 2, transacaoPrimaryKeyColumns),
	)
	values := []interface{}{related.Ticketid, o.Transacaoid}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Iddoticket = related.Ticketid
	if o.R == nil {
		o.R = &transacaoR{
			IddoticketTicket: related,
		}
	} else {
		o.R.IddoticketTicket = related
	}

	if related.R == nil {
		related.R = &ticketR{
			IddoticketTransacao: o,
		}
	} else {
		related.R.IddoticketTransacao = o
	}

	return nil
}

// SetTenantidTenant of the transacao to the related item.
// Sets o.R.TenantidTenant to related.
// Adds o to related.R.TenantidTransacaos.
func (o *Transacao) SetTenantidTenant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tenant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transacao\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tenantid"}),
		strmangle.WhereClause("\"", "\"", 2, transacaoPrimaryKeyColumns),
	)
	values := []interface{}{related.Tenantid, o.Transacaoid}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Tenantid = related.Tenantid
	if o.R == nil {
		o.R = &transacaoR{
			TenantidTenant: related,
		}
	} else {
		o.R.TenantidTenant = related
	}

	if related.R == nil {
		related.R = &tenantR{
			TenantidTransacaos: TransacaoSlice{o},
		}
	} else {
		related.R.TenantidTransacaos = append(related.R.TenantidTransacaos, o)
	}

	return nil
}

// SetTransacaoidAvaliacao of the transacao to the related item.
// Sets o.R.TransacaoidAvaliacao to related.
// Adds o to related.R.TransacaoidTransacao.
func (o *Transacao) SetTransacaoidAvaliacao(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Avaliacao) error {
	var err error

	if insert {
		related.Transacaoid = o.Transacaoid

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"avaliacao\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"transacaoid"}),
			strmangle.WhereClause("\"", "\"", 2, avaliacaoPrimaryKeyColumns),
		)
		values := []interface{}{o.Transacaoid, related.Avaliacaoid}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.Transacaoid = o.Transacaoid
	}

	if o.R == nil {
		o.R = &transacaoR{
			TransacaoidAvaliacao: related,
		}
	} else {
		o.R.TransacaoidAvaliacao = related
	}

	if related.R == nil {
		related.R = &avaliacaoR{
			TransacaoidTransacao: o,
		}
	} else {
		related.R.TransacaoidTransacao = o
	}
	return nil
}

// Transacaos retrieves all the records using an executor.
func Transacaos(mods ...qm.QueryMod) transacaoQuery {
	mods = append(mods, qm.From("\"transacao\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"transacao\".*"})
	}

	return transacaoQuery{q}
}

// FindTransacao retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTransacao(ctx context.Context, exec boil.ContextExecutor, transacaoid int, selectCols ...string) (*Transacao, error) {
	transacaoObj := &Transacao{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"transacao\" where \"transacaoid\"=$1", sel,
	)

	q := queries.Raw(query, transacaoid)

	err := q.Bind(ctx, exec, transacaoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from transacao")
	}

	if err = transacaoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return transacaoObj, err
	}

	return transacaoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Transacao) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no transacao provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transacaoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	transacaoInsertCacheMut.RLock()
	cache, cached := transacaoInsertCache[key]
	transacaoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			transacaoAllColumns,
			transacaoColumnsWithDefault,
			transacaoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(transacaoType, transacaoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(transacaoType, transacaoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"transacao\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"transacao\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into transacao")
	}

	if !cached {
		transacaoInsertCacheMut.Lock()
		transacaoInsertCache[key] = cache
		transacaoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Transacao.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Transacao) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	transacaoUpdateCacheMut.RLock()
	cache, cached := transacaoUpdateCache[key]
	transacaoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			transacaoAllColumns,
			transacaoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update transacao, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"transacao\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, transacaoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(transacaoType, transacaoMapping, append(wl, transacaoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update transacao row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for transacao")
	}

	if !cached {
		transacaoUpdateCacheMut.Lock()
		transacaoUpdateCache[key] = cache
		transacaoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q transacaoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for transacao")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for transacao")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TransacaoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transacaoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"transacao\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, transacaoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in transacao slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all transacao")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Transacao) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no transacao provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transacaoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	transacaoUpsertCacheMut.RLock()
	cache, cached := transacaoUpsertCache[key]
	transacaoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			transacaoAllColumns,
			transacaoColumnsWithDefault,
			transacaoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			transacaoAllColumns,
			transacaoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert transacao, could not build update column list")
		}

		ret := strmangle.SetComplement(transacaoAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(transacaoPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert transacao, could not build conflict column list")
			}

			conflict = make([]string, len(transacaoPrimaryKeyColumns))
			copy(conflict, transacaoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"transacao\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(transacaoType, transacaoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(transacaoType, transacaoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert transacao")
	}

	if !cached {
		transacaoUpsertCacheMut.Lock()
		transacaoUpsertCache[key] = cache
		transacaoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Transacao record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Transacao) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Transacao provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), transacaoPrimaryKeyMapping)
	sql := "DELETE FROM \"transacao\" WHERE \"transacaoid\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from transacao")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for transacao")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q transacaoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no transacaoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from transacao")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for transacao")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TransacaoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(transacaoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transacaoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"transacao\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, transacaoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from transacao slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for transacao")
	}

	if len(transacaoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Transacao) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTransacao(ctx, exec, o.Transacaoid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransacaoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TransacaoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transacaoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"transacao\".* FROM \"transacao\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, transacaoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TransacaoSlice")
	}

	*o = slice

	return nil
}

// TransacaoExists checks if the Transacao row exists.
func TransacaoExists(ctx context.Context, exec boil.ContextExecutor, transacaoid int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"transacao\" where \"transacaoid\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, transacaoid)
	}
	row := exec.QueryRowContext(ctx, sql, transacaoid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if transacao exists")
	}

	return exists, nil
}

// Exists checks if the Transacao row exists.
func (o *Transacao) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TransacaoExists(ctx, exec, o.Transacaoid)
}
