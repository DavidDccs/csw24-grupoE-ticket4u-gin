// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Avaliacao is an object representing the database table.
type Avaliacao struct {
	Avaliacaoid int         `boil:"avaliacaoid" json:"avaliacaoid" toml:"avaliacaoid" yaml:"avaliacaoid"`
	Compradorid int         `boil:"compradorid" json:"compradorid" toml:"compradorid" yaml:"compradorid"`
	Vendedorid  int         `boil:"vendedorid" json:"vendedorid" toml:"vendedorid" yaml:"vendedorid"`
	Transacaoid int         `boil:"transacaoid" json:"transacaoid" toml:"transacaoid" yaml:"transacaoid"`
	Nota        int         `boil:"nota" json:"nota" toml:"nota" yaml:"nota"`
	Comentario  null.String `boil:"comentario" json:"comentario,omitempty" toml:"comentario" yaml:"comentario,omitempty"`
	Data        null.Time   `boil:"data" json:"data,omitempty" toml:"data" yaml:"data,omitempty"`

	R *avaliacaoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L avaliacaoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AvaliacaoColumns = struct {
	Avaliacaoid string
	Compradorid string
	Vendedorid  string
	Transacaoid string
	Nota        string
	Comentario  string
	Data        string
}{
	Avaliacaoid: "avaliacaoid",
	Compradorid: "compradorid",
	Vendedorid:  "vendedorid",
	Transacaoid: "transacaoid",
	Nota:        "nota",
	Comentario:  "comentario",
	Data:        "data",
}

var AvaliacaoTableColumns = struct {
	Avaliacaoid string
	Compradorid string
	Vendedorid  string
	Transacaoid string
	Nota        string
	Comentario  string
	Data        string
}{
	Avaliacaoid: "avaliacao.avaliacaoid",
	Compradorid: "avaliacao.compradorid",
	Vendedorid:  "avaliacao.vendedorid",
	Transacaoid: "avaliacao.transacaoid",
	Nota:        "avaliacao.nota",
	Comentario:  "avaliacao.comentario",
	Data:        "avaliacao.data",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AvaliacaoWhere = struct {
	Avaliacaoid whereHelperint
	Compradorid whereHelperint
	Vendedorid  whereHelperint
	Transacaoid whereHelperint
	Nota        whereHelperint
	Comentario  whereHelpernull_String
	Data        whereHelpernull_Time
}{
	Avaliacaoid: whereHelperint{field: "\"avaliacao\".\"avaliacaoid\""},
	Compradorid: whereHelperint{field: "\"avaliacao\".\"compradorid\""},
	Vendedorid:  whereHelperint{field: "\"avaliacao\".\"vendedorid\""},
	Transacaoid: whereHelperint{field: "\"avaliacao\".\"transacaoid\""},
	Nota:        whereHelperint{field: "\"avaliacao\".\"nota\""},
	Comentario:  whereHelpernull_String{field: "\"avaliacao\".\"comentario\""},
	Data:        whereHelpernull_Time{field: "\"avaliacao\".\"data\""},
}

// AvaliacaoRels is where relationship names are stored.
var AvaliacaoRels = struct {
	CompradoridUsuario   string
	TransacaoidTransacao string
	VendedoridUsuario    string
}{
	CompradoridUsuario:   "CompradoridUsuario",
	TransacaoidTransacao: "TransacaoidTransacao",
	VendedoridUsuario:    "VendedoridUsuario",
}

// avaliacaoR is where relationships are stored.
type avaliacaoR struct {
	CompradoridUsuario   *Usuario   `boil:"CompradoridUsuario" json:"CompradoridUsuario" toml:"CompradoridUsuario" yaml:"CompradoridUsuario"`
	TransacaoidTransacao *Transacao `boil:"TransacaoidTransacao" json:"TransacaoidTransacao" toml:"TransacaoidTransacao" yaml:"TransacaoidTransacao"`
	VendedoridUsuario    *Usuario   `boil:"VendedoridUsuario" json:"VendedoridUsuario" toml:"VendedoridUsuario" yaml:"VendedoridUsuario"`
}

// NewStruct creates a new relationship struct
func (*avaliacaoR) NewStruct() *avaliacaoR {
	return &avaliacaoR{}
}

func (r *avaliacaoR) GetCompradoridUsuario() *Usuario {
	if r == nil {
		return nil
	}
	return r.CompradoridUsuario
}

func (r *avaliacaoR) GetTransacaoidTransacao() *Transacao {
	if r == nil {
		return nil
	}
	return r.TransacaoidTransacao
}

func (r *avaliacaoR) GetVendedoridUsuario() *Usuario {
	if r == nil {
		return nil
	}
	return r.VendedoridUsuario
}

// avaliacaoL is where Load methods for each relationship are stored.
type avaliacaoL struct{}

var (
	avaliacaoAllColumns            = []string{"avaliacaoid", "compradorid", "vendedorid", "transacaoid", "nota", "comentario", "data"}
	avaliacaoColumnsWithoutDefault = []string{"compradorid", "vendedorid", "transacaoid", "nota"}
	avaliacaoColumnsWithDefault    = []string{"avaliacaoid", "comentario", "data"}
	avaliacaoPrimaryKeyColumns     = []string{"avaliacaoid"}
	avaliacaoGeneratedColumns      = []string{}
)

type (
	// AvaliacaoSlice is an alias for a slice of pointers to Avaliacao.
	// This should almost always be used instead of []Avaliacao.
	AvaliacaoSlice []*Avaliacao
	// AvaliacaoHook is the signature for custom Avaliacao hook methods
	AvaliacaoHook func(context.Context, boil.ContextExecutor, *Avaliacao) error

	avaliacaoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	avaliacaoType                 = reflect.TypeOf(&Avaliacao{})
	avaliacaoMapping              = queries.MakeStructMapping(avaliacaoType)
	avaliacaoPrimaryKeyMapping, _ = queries.BindMapping(avaliacaoType, avaliacaoMapping, avaliacaoPrimaryKeyColumns)
	avaliacaoInsertCacheMut       sync.RWMutex
	avaliacaoInsertCache          = make(map[string]insertCache)
	avaliacaoUpdateCacheMut       sync.RWMutex
	avaliacaoUpdateCache          = make(map[string]updateCache)
	avaliacaoUpsertCacheMut       sync.RWMutex
	avaliacaoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var avaliacaoAfterSelectMu sync.Mutex
var avaliacaoAfterSelectHooks []AvaliacaoHook

var avaliacaoBeforeInsertMu sync.Mutex
var avaliacaoBeforeInsertHooks []AvaliacaoHook
var avaliacaoAfterInsertMu sync.Mutex
var avaliacaoAfterInsertHooks []AvaliacaoHook

var avaliacaoBeforeUpdateMu sync.Mutex
var avaliacaoBeforeUpdateHooks []AvaliacaoHook
var avaliacaoAfterUpdateMu sync.Mutex
var avaliacaoAfterUpdateHooks []AvaliacaoHook

var avaliacaoBeforeDeleteMu sync.Mutex
var avaliacaoBeforeDeleteHooks []AvaliacaoHook
var avaliacaoAfterDeleteMu sync.Mutex
var avaliacaoAfterDeleteHooks []AvaliacaoHook

var avaliacaoBeforeUpsertMu sync.Mutex
var avaliacaoBeforeUpsertHooks []AvaliacaoHook
var avaliacaoAfterUpsertMu sync.Mutex
var avaliacaoAfterUpsertHooks []AvaliacaoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Avaliacao) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range avaliacaoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Avaliacao) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range avaliacaoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Avaliacao) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range avaliacaoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Avaliacao) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range avaliacaoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Avaliacao) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range avaliacaoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Avaliacao) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range avaliacaoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Avaliacao) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range avaliacaoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Avaliacao) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range avaliacaoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Avaliacao) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range avaliacaoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAvaliacaoHook registers your hook function for all future operations.
func AddAvaliacaoHook(hookPoint boil.HookPoint, avaliacaoHook AvaliacaoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		avaliacaoAfterSelectMu.Lock()
		avaliacaoAfterSelectHooks = append(avaliacaoAfterSelectHooks, avaliacaoHook)
		avaliacaoAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		avaliacaoBeforeInsertMu.Lock()
		avaliacaoBeforeInsertHooks = append(avaliacaoBeforeInsertHooks, avaliacaoHook)
		avaliacaoBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		avaliacaoAfterInsertMu.Lock()
		avaliacaoAfterInsertHooks = append(avaliacaoAfterInsertHooks, avaliacaoHook)
		avaliacaoAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		avaliacaoBeforeUpdateMu.Lock()
		avaliacaoBeforeUpdateHooks = append(avaliacaoBeforeUpdateHooks, avaliacaoHook)
		avaliacaoBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		avaliacaoAfterUpdateMu.Lock()
		avaliacaoAfterUpdateHooks = append(avaliacaoAfterUpdateHooks, avaliacaoHook)
		avaliacaoAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		avaliacaoBeforeDeleteMu.Lock()
		avaliacaoBeforeDeleteHooks = append(avaliacaoBeforeDeleteHooks, avaliacaoHook)
		avaliacaoBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		avaliacaoAfterDeleteMu.Lock()
		avaliacaoAfterDeleteHooks = append(avaliacaoAfterDeleteHooks, avaliacaoHook)
		avaliacaoAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		avaliacaoBeforeUpsertMu.Lock()
		avaliacaoBeforeUpsertHooks = append(avaliacaoBeforeUpsertHooks, avaliacaoHook)
		avaliacaoBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		avaliacaoAfterUpsertMu.Lock()
		avaliacaoAfterUpsertHooks = append(avaliacaoAfterUpsertHooks, avaliacaoHook)
		avaliacaoAfterUpsertMu.Unlock()
	}
}

// One returns a single avaliacao record from the query.
func (q avaliacaoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Avaliacao, error) {
	o := &Avaliacao{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for avaliacao")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Avaliacao records from the query.
func (q avaliacaoQuery) All(ctx context.Context, exec boil.ContextExecutor) (AvaliacaoSlice, error) {
	var o []*Avaliacao

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Avaliacao slice")
	}

	if len(avaliacaoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Avaliacao records in the query.
func (q avaliacaoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count avaliacao rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q avaliacaoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if avaliacao exists")
	}

	return count > 0, nil
}

// CompradoridUsuario pointed to by the foreign key.
func (o *Avaliacao) CompradoridUsuario(mods ...qm.QueryMod) usuarioQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"userid\" = ?", o.Compradorid),
	}

	queryMods = append(queryMods, mods...)

	return Usuarios(queryMods...)
}

// TransacaoidTransacao pointed to by the foreign key.
func (o *Avaliacao) TransacaoidTransacao(mods ...qm.QueryMod) transacaoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"transacaoid\" = ?", o.Transacaoid),
	}

	queryMods = append(queryMods, mods...)

	return Transacaos(queryMods...)
}

// VendedoridUsuario pointed to by the foreign key.
func (o *Avaliacao) VendedoridUsuario(mods ...qm.QueryMod) usuarioQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"userid\" = ?", o.Vendedorid),
	}

	queryMods = append(queryMods, mods...)

	return Usuarios(queryMods...)
}

// LoadCompradoridUsuario allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (avaliacaoL) LoadCompradoridUsuario(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAvaliacao interface{}, mods queries.Applicator) error {
	var slice []*Avaliacao
	var object *Avaliacao

	if singular {
		var ok bool
		object, ok = maybeAvaliacao.(*Avaliacao)
		if !ok {
			object = new(Avaliacao)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAvaliacao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAvaliacao))
			}
		}
	} else {
		s, ok := maybeAvaliacao.(*[]*Avaliacao)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAvaliacao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAvaliacao))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &avaliacaoR{}
		}
		args[object.Compradorid] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &avaliacaoR{}
			}

			args[obj.Compradorid] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`usuario`),
		qm.WhereIn(`usuario.userid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Usuario")
	}

	var resultSlice []*Usuario
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Usuario")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for usuario")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usuario")
	}

	if len(usuarioAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CompradoridUsuario = foreign
		if foreign.R == nil {
			foreign.R = &usuarioR{}
		}
		foreign.R.CompradoridAvaliacaos = append(foreign.R.CompradoridAvaliacaos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Compradorid == foreign.Userid {
				local.R.CompradoridUsuario = foreign
				if foreign.R == nil {
					foreign.R = &usuarioR{}
				}
				foreign.R.CompradoridAvaliacaos = append(foreign.R.CompradoridAvaliacaos, local)
				break
			}
		}
	}

	return nil
}

// LoadTransacaoidTransacao allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (avaliacaoL) LoadTransacaoidTransacao(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAvaliacao interface{}, mods queries.Applicator) error {
	var slice []*Avaliacao
	var object *Avaliacao

	if singular {
		var ok bool
		object, ok = maybeAvaliacao.(*Avaliacao)
		if !ok {
			object = new(Avaliacao)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAvaliacao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAvaliacao))
			}
		}
	} else {
		s, ok := maybeAvaliacao.(*[]*Avaliacao)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAvaliacao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAvaliacao))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &avaliacaoR{}
		}
		args[object.Transacaoid] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &avaliacaoR{}
			}

			args[obj.Transacaoid] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`transacao`),
		qm.WhereIn(`transacao.transacaoid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Transacao")
	}

	var resultSlice []*Transacao
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Transacao")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for transacao")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transacao")
	}

	if len(transacaoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TransacaoidTransacao = foreign
		if foreign.R == nil {
			foreign.R = &transacaoR{}
		}
		foreign.R.TransacaoidAvaliacao = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Transacaoid == foreign.Transacaoid {
				local.R.TransacaoidTransacao = foreign
				if foreign.R == nil {
					foreign.R = &transacaoR{}
				}
				foreign.R.TransacaoidAvaliacao = local
				break
			}
		}
	}

	return nil
}

// LoadVendedoridUsuario allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (avaliacaoL) LoadVendedoridUsuario(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAvaliacao interface{}, mods queries.Applicator) error {
	var slice []*Avaliacao
	var object *Avaliacao

	if singular {
		var ok bool
		object, ok = maybeAvaliacao.(*Avaliacao)
		if !ok {
			object = new(Avaliacao)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAvaliacao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAvaliacao))
			}
		}
	} else {
		s, ok := maybeAvaliacao.(*[]*Avaliacao)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAvaliacao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAvaliacao))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &avaliacaoR{}
		}
		args[object.Vendedorid] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &avaliacaoR{}
			}

			args[obj.Vendedorid] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`usuario`),
		qm.WhereIn(`usuario.userid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Usuario")
	}

	var resultSlice []*Usuario
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Usuario")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for usuario")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usuario")
	}

	if len(usuarioAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VendedoridUsuario = foreign
		if foreign.R == nil {
			foreign.R = &usuarioR{}
		}
		foreign.R.VendedoridAvaliacaos = append(foreign.R.VendedoridAvaliacaos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Vendedorid == foreign.Userid {
				local.R.VendedoridUsuario = foreign
				if foreign.R == nil {
					foreign.R = &usuarioR{}
				}
				foreign.R.VendedoridAvaliacaos = append(foreign.R.VendedoridAvaliacaos, local)
				break
			}
		}
	}

	return nil
}

// SetCompradoridUsuario of the avaliacao to the related item.
// Sets o.R.CompradoridUsuario to related.
// Adds o to related.R.CompradoridAvaliacaos.
func (o *Avaliacao) SetCompradoridUsuario(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Usuario) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"avaliacao\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"compradorid"}),
		strmangle.WhereClause("\"", "\"", 2, avaliacaoPrimaryKeyColumns),
	)
	values := []interface{}{related.Userid, o.Avaliacaoid}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Compradorid = related.Userid
	if o.R == nil {
		o.R = &avaliacaoR{
			CompradoridUsuario: related,
		}
	} else {
		o.R.CompradoridUsuario = related
	}

	if related.R == nil {
		related.R = &usuarioR{
			CompradoridAvaliacaos: AvaliacaoSlice{o},
		}
	} else {
		related.R.CompradoridAvaliacaos = append(related.R.CompradoridAvaliacaos, o)
	}

	return nil
}

// SetTransacaoidTransacao of the avaliacao to the related item.
// Sets o.R.TransacaoidTransacao to related.
// Adds o to related.R.TransacaoidAvaliacao.
func (o *Avaliacao) SetTransacaoidTransacao(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Transacao) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"avaliacao\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"transacaoid"}),
		strmangle.WhereClause("\"", "\"", 2, avaliacaoPrimaryKeyColumns),
	)
	values := []interface{}{related.Transacaoid, o.Avaliacaoid}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Transacaoid = related.Transacaoid
	if o.R == nil {
		o.R = &avaliacaoR{
			TransacaoidTransacao: related,
		}
	} else {
		o.R.TransacaoidTransacao = related
	}

	if related.R == nil {
		related.R = &transacaoR{
			TransacaoidAvaliacao: o,
		}
	} else {
		related.R.TransacaoidAvaliacao = o
	}

	return nil
}

// SetVendedoridUsuario of the avaliacao to the related item.
// Sets o.R.VendedoridUsuario to related.
// Adds o to related.R.VendedoridAvaliacaos.
func (o *Avaliacao) SetVendedoridUsuario(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Usuario) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"avaliacao\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"vendedorid"}),
		strmangle.WhereClause("\"", "\"", 2, avaliacaoPrimaryKeyColumns),
	)
	values := []interface{}{related.Userid, o.Avaliacaoid}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Vendedorid = related.Userid
	if o.R == nil {
		o.R = &avaliacaoR{
			VendedoridUsuario: related,
		}
	} else {
		o.R.VendedoridUsuario = related
	}

	if related.R == nil {
		related.R = &usuarioR{
			VendedoridAvaliacaos: AvaliacaoSlice{o},
		}
	} else {
		related.R.VendedoridAvaliacaos = append(related.R.VendedoridAvaliacaos, o)
	}

	return nil
}

// Avaliacaos retrieves all the records using an executor.
func Avaliacaos(mods ...qm.QueryMod) avaliacaoQuery {
	mods = append(mods, qm.From("\"avaliacao\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"avaliacao\".*"})
	}

	return avaliacaoQuery{q}
}

// FindAvaliacao retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAvaliacao(ctx context.Context, exec boil.ContextExecutor, avaliacaoid int, selectCols ...string) (*Avaliacao, error) {
	avaliacaoObj := &Avaliacao{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"avaliacao\" where \"avaliacaoid\"=$1", sel,
	)

	q := queries.Raw(query, avaliacaoid)

	err := q.Bind(ctx, exec, avaliacaoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from avaliacao")
	}

	if err = avaliacaoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return avaliacaoObj, err
	}

	return avaliacaoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Avaliacao) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no avaliacao provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(avaliacaoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	avaliacaoInsertCacheMut.RLock()
	cache, cached := avaliacaoInsertCache[key]
	avaliacaoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			avaliacaoAllColumns,
			avaliacaoColumnsWithDefault,
			avaliacaoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(avaliacaoType, avaliacaoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(avaliacaoType, avaliacaoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"avaliacao\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"avaliacao\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into avaliacao")
	}

	if !cached {
		avaliacaoInsertCacheMut.Lock()
		avaliacaoInsertCache[key] = cache
		avaliacaoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Avaliacao.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Avaliacao) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	avaliacaoUpdateCacheMut.RLock()
	cache, cached := avaliacaoUpdateCache[key]
	avaliacaoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			avaliacaoAllColumns,
			avaliacaoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update avaliacao, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"avaliacao\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, avaliacaoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(avaliacaoType, avaliacaoMapping, append(wl, avaliacaoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update avaliacao row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for avaliacao")
	}

	if !cached {
		avaliacaoUpdateCacheMut.Lock()
		avaliacaoUpdateCache[key] = cache
		avaliacaoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q avaliacaoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for avaliacao")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for avaliacao")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AvaliacaoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), avaliacaoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"avaliacao\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, avaliacaoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in avaliacao slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all avaliacao")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Avaliacao) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no avaliacao provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(avaliacaoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	avaliacaoUpsertCacheMut.RLock()
	cache, cached := avaliacaoUpsertCache[key]
	avaliacaoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			avaliacaoAllColumns,
			avaliacaoColumnsWithDefault,
			avaliacaoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			avaliacaoAllColumns,
			avaliacaoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert avaliacao, could not build update column list")
		}

		ret := strmangle.SetComplement(avaliacaoAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(avaliacaoPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert avaliacao, could not build conflict column list")
			}

			conflict = make([]string, len(avaliacaoPrimaryKeyColumns))
			copy(conflict, avaliacaoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"avaliacao\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(avaliacaoType, avaliacaoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(avaliacaoType, avaliacaoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert avaliacao")
	}

	if !cached {
		avaliacaoUpsertCacheMut.Lock()
		avaliacaoUpsertCache[key] = cache
		avaliacaoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Avaliacao record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Avaliacao) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Avaliacao provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), avaliacaoPrimaryKeyMapping)
	sql := "DELETE FROM \"avaliacao\" WHERE \"avaliacaoid\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from avaliacao")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for avaliacao")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q avaliacaoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no avaliacaoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from avaliacao")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for avaliacao")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AvaliacaoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(avaliacaoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), avaliacaoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"avaliacao\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, avaliacaoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from avaliacao slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for avaliacao")
	}

	if len(avaliacaoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Avaliacao) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAvaliacao(ctx, exec, o.Avaliacaoid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AvaliacaoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AvaliacaoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), avaliacaoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"avaliacao\".* FROM \"avaliacao\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, avaliacaoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AvaliacaoSlice")
	}

	*o = slice

	return nil
}

// AvaliacaoExists checks if the Avaliacao row exists.
func AvaliacaoExists(ctx context.Context, exec boil.ContextExecutor, avaliacaoid int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"avaliacao\" where \"avaliacaoid\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, avaliacaoid)
	}
	row := exec.QueryRowContext(ctx, sql, avaliacaoid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if avaliacao exists")
	}

	return exists, nil
}

// Exists checks if the Avaliacao row exists.
func (o *Avaliacao) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AvaliacaoExists(ctx, exec, o.Avaliacaoid)
}
